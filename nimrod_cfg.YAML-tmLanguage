# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Nimrod Config
scopeName: source.nimrodcfg
fileTypes: ["cfg"]
uuid: 8fb54f5c-6f67-4d13-9dcc-52650ea4cb3e

patterns:
- name: comment.line.number-sign.nimrodcfg
  match: (#\s*(TODO|todo)?).*$\n?
  captures:
    '1': {name: punctuation.definition.comment.nimrodcfg}
    '2': {name: invalid.illegal.TODO.nimrodcfg}

- comment: Section declarations
  name: support.type.nimrodcfg
  match: \[.+\]

- comment: Key declarations
  begin: ^([a-zA-Z0-9_\.]+)(\:)
  end: \n
  captures:
    '1': {name: variable.parameter.nimrodcfg}
  patterns:

  - name: constant.numeric.float.decimal.nimrodcfg
    match: \b((\d[_\d]*\.[_\d]+([eE][\+\-]?\d[_\d]*)?)|([eE][\+\-]?\d[_\d]*))('[fF](32|64))?

  - name: constant.numeric.integer.hexadecimal.nimrodcfg
    match: \b(0[xX]\h[_\h]*)('[iIuU](8|16|32|64))?

  - comment: For simplicity's sake, we don't enforce floats only having 32 and
             64 prefix types.
    name: constant.numeric.integer.octal.nimrodcfg
    match: \b(0o[0-7][_0-7]*)

  - name: constant.numeric.integer.binary.nimrodcfg
    match: \b(0(b|B)[01][_01]*)

  - name: constant.numeric.integer.decimal.nimrodcfg
    match: \b(\d[_\d]*)

  - comment: Language Constants.
    name: constant.language.nimrodcfg
    match: \b(true|false)\b

  - comment: Raw Double Quoted String
    name: string.quoted.double.raw.nimrodcfg
    begin: r\"
    end: \"
    patterns:
    - match: \"\"

  - comment: Double Quoted String
    name: string.quoted.double.nimrodcfg
    begin: \"
    end: \"
    captures:
      '1': {name: storage.type.function.nimrodcfg}
    patterns:
    - match: (\\([abenrclftv\\]|["']|[0-9])|x\h\h)

  - comment: Single quoted character literal
    name: string.quoted.single.nimrodcfg
    match: \'(\\\d{1,3}|\\?[^\n]?)\'

  - comment: Value declarations
    match: \b(.+)\b
    captures:
      '1': {name: string.raw.nimrodcfg}

...