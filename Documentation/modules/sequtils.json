[
  {
    "comment": ":Author: Alex Mitchell\u000D\u000A##\u000D\u000A## This module implements operations for the built-in `seq`:idx: type which\u000D\u000A## were inspired by functional programming languages. If you are looking for\u000D\u000A## the typical `map` function which applies a function to every element in a\u000D\u000A## sequence, it already exists in the `system <system.html>`_ module in both\u000D\u000A## mutable and immutable styles.\u000D\u000A##\u000D\u000A## Also, for functional style programming you may want to pass `anonymous procs\u000D\u000A## <manual.html#anonymous-procs>`_ to procs like ``filter`` to reduce typing.\u000D\u000A## Anonymous procs can use `the special do notation <manual.html#do-notation>`_\u000D\u000A## which is more convenient in certain situations.\u000D\u000A##\u000D\u000A## **Note**: This interface will change as soon as the compiler supports\u000D\u000A## closures and proper coroutines."
  }, 
  {
    "name": "concat", 
    "type": "skProc", 
    "description": "<p>Takes several sequences' items and returns them inside a new sequence.</p>\u000D\u000A<p>Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">s1</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">s2</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">4</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">5</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">s3</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">6</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">7</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">total</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">concat</span><span class=\"Punctation\">(</span><span class=\"Identifier\">s1</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">s2</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">s3</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">total</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">5</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">6</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">7</span><span class=\"Punctation\">]</span></pre>", 
    "code": "proc concat*[T](seqs: varargs[seq[T]]): seq[T]"
  }, 
  {
    "name": "distnct", 
    "type": "skProc", 
    "description": "<p>Returns a new sequence without duplicates.</p>\u000D\u000A<p>This proc is <cite>misspelled</cite> on purpose to avoid a clash with the keyword <tt class=\"docutils literal\"><span class=\"pre\">distinct</span></tt> used to <a class=\"reference external\" href=\"manual.html#distinct-type\">define a derived type incompatible with its base type</a>. Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">dup1</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">8</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">dup2</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"StringLit\">&quot;a&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;a&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;c&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;d&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;d&quot;</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">unique1</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">distnct</span><span class=\"Punctation\">(</span><span class=\"Identifier\">dup1</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">unique2</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">distnct</span><span class=\"Punctation\">(</span><span class=\"Identifier\">dup2</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">unique1</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">8</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">unique2</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"StringLit\">&quot;a&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;c&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;d&quot;</span><span class=\"Punctation\">]</span></pre>", 
    "code": "proc distnct*[T](seq1: seq[T]): seq[T]"
  }, 
  {
    "name": "zip", 
    "type": "skProc", 
    "description": "<p>Returns a new sequence with a combination of the two input sequences.</p>\u000D\u000A<p>For convenience you can access the returned tuples through the named fields <cite>a</cite> and <cite>b</cite>. If one sequence is shorter, the remaining items in the longer sequence are discarded. Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">short</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">long</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">6</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">5</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">1</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">words</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"StringLit\">&quot;one&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;two&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;three&quot;</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">zip1</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">zip</span><span class=\"Punctation\">(</span><span class=\"Identifier\">short</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">long</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">zip2</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">zip</span><span class=\"Punctation\">(</span><span class=\"Identifier\">short</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">words</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">zip1</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"Punctation\">(</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">6</span><span class=\"Punctation\">)</span><span class=\"Punctation\">,</span> <span class=\"Punctation\">(</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">5</span><span class=\"Punctation\">)</span><span class=\"Punctation\">,</span> <span class=\"Punctation\">(</span><span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">)</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">zip2</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"Punctation\">(</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;one&quot;</span><span class=\"Punctation\">)</span><span class=\"Punctation\">,</span> <span class=\"Punctation\">(</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;two&quot;</span><span class=\"Punctation\">)</span><span class=\"Punctation\">,</span> <span class=\"Punctation\">(</span><span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;three&quot;</span><span class=\"Punctation\">)</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">zip1</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">]</span><span class=\"Operator\">.</span><span class=\"Identifier\">b</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">4</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">zip2</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">]</span><span class=\"Operator\">.</span><span class=\"Identifier\">b</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;three&quot;</span></pre>", 
    "code": "proc zip*[S, T](seq1: seq[S]; seq2: seq[T]): seq[tuple[a: S, b: T]]"
  }, 
  {
    "name": "filter", 
    "type": "skIterator", 
    "description": "<p>Iterates through a sequence and yields every item that fulfills the predicate.</p>\u000D\u000A<p>Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span> <span class=\"Identifier\">numbers</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">5</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">8</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">9</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">7</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Keyword\">for</span> <span class=\"Identifier\">n</span> <span class=\"Keyword\">in</span> <span class=\"Identifier\">filter</span><span class=\"Punctation\">(</span><span class=\"Identifier\">numbers</span><span class=\"Punctation\">,</span> <span class=\"Keyword\">proc</span> <span class=\"Punctation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctation\">:</span> <span class=\"Identifier\">int</span><span class=\"Punctation\">)</span><span class=\"Punctation\">:</span> <span class=\"Identifier\">bool</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">x</span> <span class=\"Keyword\">mod</span> <span class=\"DecNumber\">2</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">0</span><span class=\"Punctation\">)</span><span class=\"Punctation\">:</span>\u000D\u000A  <span class=\"Identifier\">echo</span><span class=\"Punctation\">(</span><span class=\"Operator\">$</span><span class=\"Identifier\">n</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Comment\"># echoes 4, 8, 4 in separate lines</span></pre>", 
    "code": "iterator filter*[T](seq1: seq[T]; pred: proc (item: T): bool {.closure.}): T"
  }, 
  {
    "name": "filter", 
    "type": "skProc", 
    "description": "<p>Returns a new sequence with all the items that fulfilled the predicate.</p>\u000D\u000A<p>Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">colors</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"StringLit\">&quot;red&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;yellow&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;black&quot;</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">f1</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">filter</span><span class=\"Punctation\">(</span><span class=\"Identifier\">colors</span><span class=\"Punctation\">,</span> <span class=\"Keyword\">proc</span><span class=\"Punctation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctation\">:</span> <span class=\"Identifier\">string</span><span class=\"Punctation\">)</span><span class=\"Punctation\">:</span> <span class=\"Identifier\">bool</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">x</span><span class=\"Operator\">.</span><span class=\"Identifier\">len</span> <span class=\"Operator\">&lt;</span> <span class=\"DecNumber\">6</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">f2</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">filter</span><span class=\"Punctation\">(</span><span class=\"Identifier\">colors</span><span class=\"Punctation\">)</span> <span class=\"Keyword\">do</span> <span class=\"Punctation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctation\">:</span> <span class=\"Identifier\">string</span><span class=\"Punctation\">)</span> <span class=\"Operator\">-&gt;</span> <span class=\"Identifier\">bool</span> <span class=\"Punctation\">:</span> <span class=\"Identifier\">x</span><span class=\"Operator\">.</span><span class=\"Identifier\">len</span> <span class=\"Operator\">&gt;</span> <span class=\"DecNumber\">5</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">f1</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"StringLit\">&quot;red&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;black&quot;</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">f2</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"StringLit\">&quot;yellow&quot;</span><span class=\"Punctation\">]</span></pre>", 
    "code": "proc filter*[T](seq1: seq[T]; pred: proc (item: T): bool {.closure.}): seq[T]"
  }, 
  {
    "name": "delete", 
    "type": "skProc", 
    "description": "<p>Deletes in <cite>s</cite> the items at position <cite>first</cite> .. <cite>last</cite>. This modifies <cite>s</cite> itself, it does not return a copy.</p>\u000D\u000A<p>Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span> <span class=\"Identifier\">outcome</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Keyword\">var</span> <span class=\"Identifier\">dest</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Identifier\">dest</span><span class=\"Operator\">.</span><span class=\"Identifier\">delete</span><span class=\"Punctation\">(</span><span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">8</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">outcome</span> <span class=\"Operator\">==</span> <span class=\"Identifier\">dest</span></pre>", 
    "code": "proc delete*[T](s: var seq[T]; first = 0; last = 0)"
  }, 
  {
    "name": "insert", 
    "type": "skProc", 
    "description": "<p>Inserts items from <cite>src</cite> into <cite>dest</cite> at position <cite>pos</cite>. This modifies <cite>dest</cite> itself, it does not return a copy.</p>\u000D\u000A<p>Example:</p>\u000D\u000A<pre><span class=\"Keyword\">var</span> <span class=\"Identifier\">dest</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">src</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">outcome</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Identifier\">dest</span><span class=\"Operator\">.</span><span class=\"Identifier\">insert</span><span class=\"Punctation\">(</span><span class=\"Identifier\">src</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">dest</span> <span class=\"Operator\">==</span> <span class=\"Identifier\">outcome</span></pre>", 
    "code": "proc insert*[T](dest: var seq[T]; src: openArray[T]; pos = 0)"
  }, 
  {
    "name": "filterIt", 
    "type": "skTemplate", 
    "description": "<p>Returns a new sequence with all the items that fulfilled the predicate.</p>\u000D\u000A<p>Unlike the <cite>proc</cite> version, the predicate needs to be an expression using the <tt class=\"docutils literal\"><span class=\"pre\">it</span></tt> variable for testing, like: <tt class=\"docutils literal\"><span class=\"pre\">filterIt(&quot;abcxyz&quot;, it == 'x')</span></tt>. Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">temperatures</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"Operator\">-</span><span class=\"FloatNumber\">272.15</span><span class=\"Punctation\">,</span> <span class=\"Operator\">-</span><span class=\"FloatNumber\">2.0</span><span class=\"Punctation\">,</span> <span class=\"FloatNumber\">24.5</span><span class=\"Punctation\">,</span> <span class=\"FloatNumber\">44.31</span><span class=\"Punctation\">,</span> <span class=\"FloatNumber\">99.9</span><span class=\"Punctation\">,</span> <span class=\"Operator\">-</span><span class=\"FloatNumber\">113.44</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">acceptable</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">filterIt</span><span class=\"Punctation\">(</span><span class=\"Identifier\">temperatures</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">it</span> <span class=\"Operator\">&lt;</span> <span class=\"DecNumber\">50</span> <span class=\"Keyword\">and</span> <span class=\"Identifier\">it</span> <span class=\"Operator\">&gt;</span> <span class=\"Operator\">-</span><span class=\"DecNumber\">10</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">notAcceptable</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">filterIt</span><span class=\"Punctation\">(</span><span class=\"Identifier\">temperatures</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">it</span> <span class=\"Operator\">&gt;</span> <span class=\"DecNumber\">50</span> <span class=\"Keyword\">or</span> <span class=\"Identifier\">it</span> <span class=\"Operator\">&lt;</span> <span class=\"Operator\">-</span><span class=\"DecNumber\">10</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">acceptable</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"Operator\">-</span><span class=\"FloatNumber\">2.0</span><span class=\"Punctation\">,</span> <span class=\"FloatNumber\">24.5</span><span class=\"Punctation\">,</span> <span class=\"FloatNumber\">44.31</span><span class=\"Punctation\">]</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">notAcceptable</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"Operator\">-</span><span class=\"FloatNumber\">272.15</span><span class=\"Punctation\">,</span> <span class=\"FloatNumber\">99.9</span><span class=\"Punctation\">,</span> <span class=\"Operator\">-</span><span class=\"FloatNumber\">113.44</span><span class=\"Punctation\">]</span></pre>", 
    "code": "template filterIt*(seq1, pred: expr): expr {.immediate.}"
  }, 
  {
    "name": "toSeq", 
    "type": "skTemplate", 
    "description": "<p>Transforms any iterator into a sequence.</p>\u000D\u000A<p>Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">numeric</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">2</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">4</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">5</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">6</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">7</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">8</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">9</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">odd_numbers</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">toSeq</span><span class=\"Punctation\">(</span><span class=\"Identifier\">filter</span><span class=\"Punctation\">(</span><span class=\"Identifier\">numeric</span><span class=\"Punctation\">)</span> <span class=\"Keyword\">do</span> <span class=\"Punctation\">(</span><span class=\"Identifier\">x</span><span class=\"Punctation\">:</span> <span class=\"Identifier\">int</span><span class=\"Punctation\">)</span> <span class=\"Operator\">-&gt;</span> <span class=\"Identifier\">bool</span><span class=\"Punctation\">:</span>\u000D\u000A    <span class=\"Keyword\">if</span> <span class=\"Identifier\">x</span> <span class=\"Keyword\">mod</span> <span class=\"DecNumber\">2</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">1</span><span class=\"Punctation\">:</span>\u000D\u000A      <span class=\"Identifier\">result</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">true</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">odd_numbers</span> <span class=\"Operator\">==</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">1</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">3</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">5</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">7</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">9</span><span class=\"Punctation\">]</span></pre>", 
    "code": "template toSeq*(iter: expr): expr {.immediate.}"
  }, 
  {
    "name": "foldl", 
    "type": "skTemplate", 
    "description": "<p>Template to fold a sequence from left to right, returning the accumulation.</p>\u000D\u000A<p>The sequence is required to have at least a single element. Debug versions of your program will assert in this situation but release versions will happily go ahead. If the sequence has a single element it will be returned without applying <tt class=\"docutils literal\"><span class=\"pre\">operation</span></tt>.</p>\u000D\u000A<p>The <tt class=\"docutils literal\"><span class=\"pre\">operation</span></tt> parameter should be an expression which uses the variables <tt class=\"docutils literal\"><span class=\"pre\">a</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">b</span></tt> for each step of the fold. Since this is a left fold, for non associative binary operations like substraction think that the sequence of numbers 1, 2 and 3 will be parenthesized as (((1) - 2) - 3).  Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">numbers</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">5</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">9</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">11</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">addition</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">foldl</span><span class=\"Punctation\">(</span><span class=\"Identifier\">numbers</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">a</span> <span class=\"Operator\">+</span> <span class=\"Identifier\">b</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">substraction</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">foldl</span><span class=\"Punctation\">(</span><span class=\"Identifier\">numbers</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">a</span> <span class=\"Operator\">-</span> <span class=\"Identifier\">b</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">multiplication</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">foldl</span><span class=\"Punctation\">(</span><span class=\"Identifier\">numbers</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">a</span> <span class=\"Operator\">*</span> <span class=\"Identifier\">b</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">words</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"StringLit\">&quot;nim&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;rod&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;is&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;cool&quot;</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">concatenation</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">foldl</span><span class=\"Punctation\">(</span><span class=\"Identifier\">words</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">a</span> <span class=\"Operator\">&amp;</span> <span class=\"Identifier\">b</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">addition</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">25</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;Addition is (((5)+9)+11)&quot;</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">substraction</span> <span class=\"Operator\">==</span> <span class=\"Operator\">-</span><span class=\"DecNumber\">15</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;Substraction is (((5)-9)-11)&quot;</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">multiplication</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">495</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;Multiplication is (((5)*9)*11)&quot;</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">concatenation</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;nimrodiscool&quot;</span></pre>", 
    "code": "template foldl*(sequence, operation: expr): expr"
  }, 
  {
    "name": "foldr", 
    "type": "skTemplate", 
    "description": "<p>Template to fold a sequence from right to left, returning the accumulation.</p>\u000D\u000A<p>The sequence is required to have at least a single element. Debug versions of your program will assert in this situation but release versions will happily go ahead. If the sequence has a single element it will be returned without applying <tt class=\"docutils literal\"><span class=\"pre\">operation</span></tt>.</p>\u000D\u000A<p>The <tt class=\"docutils literal\"><span class=\"pre\">operation</span></tt> parameter should be an expression which uses the variables <tt class=\"docutils literal\"><span class=\"pre\">a</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">b</span></tt> for each step of the fold. Since this is a right fold, for non associative binary operations like substraction think that the sequence of numbers 1, 2 and 3 will be parenthesized as (1 - (2 - (3))). Example:</p>\u000D\u000A<pre><span class=\"Keyword\">let</span>\u000D\u000A  <span class=\"Identifier\">numbers</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"DecNumber\">5</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">9</span><span class=\"Punctation\">,</span> <span class=\"DecNumber\">11</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">addition</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">foldr</span><span class=\"Punctation\">(</span><span class=\"Identifier\">numbers</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">a</span> <span class=\"Operator\">+</span> <span class=\"Identifier\">b</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">substraction</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">foldr</span><span class=\"Punctation\">(</span><span class=\"Identifier\">numbers</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">a</span> <span class=\"Operator\">-</span> <span class=\"Identifier\">b</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">multiplication</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">foldr</span><span class=\"Punctation\">(</span><span class=\"Identifier\">numbers</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">a</span> <span class=\"Operator\">*</span> <span class=\"Identifier\">b</span><span class=\"Punctation\">)</span>\u000D\u000A  <span class=\"Identifier\">words</span> <span class=\"Operator\">=</span> <span class=\"Operator\">@</span><span class=\"Punctation\">[</span><span class=\"StringLit\">&quot;nim&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;rod&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;is&quot;</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;cool&quot;</span><span class=\"Punctation\">]</span>\u000D\u000A  <span class=\"Identifier\">concatenation</span> <span class=\"Operator\">=</span> <span class=\"Identifier\">foldr</span><span class=\"Punctation\">(</span><span class=\"Identifier\">words</span><span class=\"Punctation\">,</span> <span class=\"Identifier\">a</span> <span class=\"Operator\">&amp;</span> <span class=\"Identifier\">b</span><span class=\"Punctation\">)</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">addition</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">25</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;Addition is (5+(9+(11)))&quot;</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">substraction</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">7</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;Substraction is (5-(9-(11)))&quot;</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">multiplication</span> <span class=\"Operator\">==</span> <span class=\"DecNumber\">495</span><span class=\"Punctation\">,</span> <span class=\"StringLit\">&quot;Multiplication is (5*(9*(11)))&quot;</span>\u000D\u000A<span class=\"Identifier\">assert</span> <span class=\"Identifier\">concatenation</span> <span class=\"Operator\">==</span> <span class=\"StringLit\">&quot;nimrodiscool&quot;</span></pre>", 
    "code": "template foldr*(sequence, operation: expr): expr"
  }
]