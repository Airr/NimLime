[
  {
    "name": "BIG_ENDIAN", 
    "type": "skConst", 
    "code": "BIG_ENDIAN* = 4321"
  }, 
  {
    "name": "AUDIO_S16SYS", 
    "type": "skConst", 
    "code": "AUDIO_S16SYS* = AUDIO_S16LSB"
  }, 
  {
    "name": "HAT_LEFTDOWN", 
    "type": "skConst", 
    "code": "HAT_LEFTDOWN* = HAT_LEFT or HAT_DOWN"
  }, 
  {
    "name": "TEventKind", 
    "type": "skType", 
    "code": "TEventKind* = enum \u000D\u000A  NOEVENT = 0, \u000D\u000A  ACTIVEEVENT = 1, \u000D\u000A  KEYDOWN = 2, \u000D\u000A  KEYUP = 3, \u000D\u000A  MOUSEMOTION = 4, \u000D\u000A  MOUSEBUTTONDOWN = 5, \u000D\u000A  MOUSEBUTTONUP = 6, \u000D\u000A  JOYAXISMOTION = 7, \u000D\u000A  JOYBALLMOTION = 8, \u000D\u000A  JOYHATMOTION = 9, \u000D\u000A  JOYBUTTONDOWN = 10, \u000D\u000A  JOYBUTTONUP = 11, \u000D\u000A  QUITEV = 12, \u000D\u000A  SYSWMEVENT = 13, \u000D\u000A  EVENT_RESERVEDA = 14, \u000D\u000A  EVENT_RESERVED = 15, \u000D\u000A  VIDEORESIZE = 16, \u000D\u000A  VIDEOEXPOSE = 17, \u000D\u000A  EVENT_RESERVED2 = 18, \u000D\u000A  EVENT_RESERVED3 = 19, \u000D\u000A  EVENT_RESERVED4 = 20, \u000D\u000A  EVENT_RESERVED5 = 21, \u000D\u000A  EVENT_RESERVED6 = 22, \u000D\u000A  EVENT_RESERVED7 = 23, \u000D\u000A  USEREVENT = 24"
  }, 
  {
    "name": "K_GP2X_CLICK", 
    "type": "skConst", 
    "code": "K_GP2X_CLICK* = 18"
  }, 
  {
    "name": "GRAB_ON", 
    "type": "skConst", 
    "code": "GRAB_ON* = 1"
  }, 
  {
    "name": "TUserEvent", 
    "type": "skType", 
    "code": "TUserEvent* {.final.} = object \u000D\u000A  kind*: TEventKind\u000D\u000A  code*: cint\u000D\u000A  data1*: Pointer\u000D\u000A  data2*: Pointer\u000D\u000A"
  }, 
  {
    "name": "TSysWm", 
    "type": "skType", 
    "code": "TSysWm* = enum \u000D\u000A  SYSWM_X11"
  }, 
  {
    "name": "TSysWMmsg", 
    "type": "skType", 
    "code": "TSysWMmsg* {.final.} = object \u000D\u000A  version*: Tversion\u000D\u000A  hwnd*: THandle\u000D\u000A  msg*: int\u000D\u000A  w_Param*: int32\u000D\u000A  lParam*: int32\u000D\u000A"
  }, 
  {
    "name": "TSysWMinfo", 
    "type": "skType", 
    "code": "TSysWMinfo* {.final.} = object \u000D\u000A  version*: Tversion\u000D\u000A  window*: THandle\u000D\u000A"
  }, 
  {
    "name": "TCursor", 
    "type": "skType", 
    "code": "TCursor* {.final.} = object \u000D\u000A  area*: TRect\u000D\u000A  hot_x*, hot_y*: int16\u000D\u000A  data*: ptr byte\u000D\u000A  mask*: ptr byte\u000D\u000A  save*: array[1 .. 2, ptr byte]\u000D\u000A  wm_cursor*: Pointer\u000D\u000A"
  }, 
  {
    "name": "TCond", 
    "type": "skType", 
    "code": "TCond* {.final.} = object "
  }, 
  {
    "name": "TSYS_ThreadHandle", 
    "type": "skType", 
    "code": "TSYS_ThreadHandle* = THandle"
  }, 
  {
    "name": "TSYS_ThreadHandle", 
    "type": "skType", 
    "code": "TSYS_ThreadHandle* = pointer"
  }, 
  {
    "name": "TWordArray", 
    "type": "skType", 
    "code": "TWordArray* = array[0 .. 16383, int16]"
  }, 
  {
    "name": "Init", 
    "type": "skProc", 
    "code": "proc Init*(flags: int32): int {.cdecl, importc: \"SDL_Init\", dynlib: LibName.}"
  }, 
  {
    "name": "InitSubSystem", 
    "type": "skProc", 
    "code": "proc InitSubSystem*(flags: int32): int {.cdecl, importc: \"SDL_InitSubSystem\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "QuitSubSystem", 
    "type": "skProc", 
    "code": "proc QuitSubSystem*(flags: int32) {.cdecl, importc: \"SDL_QuitSubSystem\", \u000D\u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "WasInit", 
    "type": "skProc", 
    "code": "proc WasInit*(flags: int32): int32 {.cdecl, importc: \"SDL_WasInit\", \u000D\u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "Quit", 
    "type": "skProc", 
    "code": "proc Quit*() {.cdecl, importc: \"SDL_Quit\", dynlib: LibName.}"
  }, 
  {
    "name": "RegisterApp", 
    "type": "skProc", 
    "code": "proc RegisterApp*(name: cstring; style: int32; h_Inst: Pointer): int {.cdecl, \u000D\u000A    importc: \"SDL_RegisterApp\", dynlib: LibName.}"
  }, 
  {
    "name": "TableSize", 
    "type": "skProc", 
    "code": "proc TableSize*(table: cstring): int"
  }, 
  {
    "name": "GetError", 
    "type": "skProc", 
    "code": "proc GetError*(): cstring {.cdecl, importc: \"SDL_GetError\", dynlib: LibName.}"
  }, 
  {
    "name": "SetError", 
    "type": "skProc", 
    "code": "proc SetError*(fmt: cstring) {.cdecl, importc: \"SDL_SetError\", dynlib: LibName.}"
  }, 
  {
    "name": "ClearError", 
    "type": "skProc", 
    "code": "proc ClearError*() {.cdecl, importc: \"SDL_ClearError\", dynlib: LibName.}"
  }, 
  {
    "name": "Error", 
    "type": "skProc", 
    "code": "proc Error*(Code: Terrorcode) {.cdecl, importc: \"SDL_Error\", dynlib: LibName.}"
  }, 
  {
    "name": "OutOfMemory", 
    "type": "skProc", 
    "code": "proc OutOfMemory*()"
  }, 
  {
    "name": "RWFromFile", 
    "type": "skProc", 
    "code": "proc RWFromFile*(filename, mode: cstring): PRWops {.cdecl, \u000D\u000A    importc: \"SDL_RWFromFile\", dynlib: LibName.}"
  }, 
  {
    "name": "FreeRW", 
    "type": "skProc", 
    "code": "proc FreeRW*(area: PRWops) {.cdecl, importc: \"SDL_FreeRW\", dynlib: LibName.}"
  }, 
  {
    "name": "RWFromFP", 
    "type": "skProc", 
    "code": "proc RWFromFP*(fp: Pointer; autoclose: int): PRWops {.cdecl, \u000D\u000A    importc: \"SDL_RWFromFP\", dynlib: LibName.}"
  }, 
  {
    "name": "RWFromMem", 
    "type": "skProc", 
    "code": "proc RWFromMem*(mem: Pointer; size: int): PRWops {.cdecl, \u000D\u000A    importc: \"SDL_RWFromMem\", dynlib: LibName.}"
  }, 
  {
    "name": "RWFromConstMem", 
    "type": "skProc", 
    "code": "proc RWFromConstMem*(mem: Pointer; size: int): PRWops {.cdecl, \u000D\u000A    importc: \"SDL_RWFromConstMem\", dynlib: LibName.}"
  }, 
  {
    "name": "AllocRW", 
    "type": "skProc", 
    "code": "proc AllocRW*(): PRWops {.cdecl, importc: \"SDL_AllocRW\", dynlib: LibName.}"
  }, 
  {
    "name": "RWSeek", 
    "type": "skProc", 
    "code": "proc RWSeek*(context: PRWops; offset: int; whence: int): int"
  }, 
  {
    "name": "RWTell", 
    "type": "skProc", 
    "code": "proc RWTell*(context: PRWops): int"
  }, 
  {
    "name": "RWRead", 
    "type": "skProc", 
    "code": "proc RWRead*(context: PRWops; theptr: Pointer; size: int; n: int): int"
  }, 
  {
    "name": "RWWrite", 
    "type": "skProc", 
    "code": "proc RWWrite*(context: PRWops; theptr: Pointer; size: int; n: int): int"
  }, 
  {
    "name": "RWClose", 
    "type": "skProc", 
    "code": "proc RWClose*(context: PRWops): int"
  }, 
  {
    "name": "GetTicks", 
    "type": "skProc", 
    "code": "proc GetTicks*(): int32 {.cdecl, importc: \"SDL_GetTicks\", dynlib: LibName.}"
  }, 
  {
    "name": "Delay", 
    "type": "skProc", 
    "code": "proc Delay*(msec: int32) {.cdecl, importc: \"SDL_Delay\", dynlib: LibName.}"
  }, 
  {
    "name": "AddTimer", 
    "type": "skProc", 
    "code": "proc AddTimer*(interval: int32; callback: TNewTimerCallback; param: Pointer): PTimerID {.\u000D\u000A    cdecl, importc: \"SDL_AddTimer\", dynlib: LibName.}"
  }, 
  {
    "name": "RemoveTimer", 
    "type": "skProc", 
    "code": "proc RemoveTimer*(t: PTimerID): TBool {.cdecl, importc: \"SDL_RemoveTimer\", \u000D\u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "SetTimer", 
    "type": "skProc", 
    "code": "proc SetTimer*(interval: int32; callback: TTimerCallback): int {.cdecl, \u000D\u000A    importc: \"SDL_SetTimer\", dynlib: LibName.}"
  }, 
  {
    "name": "AudioInit", 
    "type": "skProc", 
    "code": "proc AudioInit*(driver_name: cstring): int {.cdecl, importc: \"SDL_AudioInit\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "AudioQuit", 
    "type": "skProc", 
    "code": "proc AudioQuit*() {.cdecl, importc: \"SDL_AudioQuit\", dynlib: LibName.}"
  }, 
  {
    "name": "AudioDriverName", 
    "type": "skProc", 
    "code": "proc AudioDriverName*(namebuf: cstring; maxlen: int): cstring {.cdecl, \u000D\u000A    importc: \"SDL_AudioDriverName\", dynlib: LibName.}"
  }, 
  {
    "name": "OpenAudio", 
    "type": "skProc", 
    "code": "proc OpenAudio*(desired, obtained: PAudioSpec): int {.cdecl, \u000D\u000A    importc: \"SDL_OpenAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "GetAudioStatus", 
    "type": "skProc", 
    "code": "proc GetAudioStatus*(): TAudiostatus {.cdecl, importc: \"SDL_GetAudioStatus\", \u000D\u000A                                       dynlib: LibName.}"
  }, 
  {
    "name": "PauseAudio", 
    "type": "skProc", 
    "code": "proc PauseAudio*(pause_on: int) {.cdecl, importc: \"SDL_PauseAudio\", \u000D\u000A                                  dynlib: LibName.}"
  }, 
  {
    "name": "LoadWAV_RW", 
    "type": "skProc", 
    "code": "proc LoadWAV_RW*(src: PRWops; freesrc: int; spec: PAudioSpec; \u000D\u000A                 audio_buf: ptr byte; audiolen: PUInt32): PAudioSpec {.cdecl, \u000D\u000A    importc: \"SDL_LoadWAV_RW\", dynlib: LibName.}"
  }, 
  {
    "name": "LoadWAV", 
    "type": "skProc", 
    "code": "proc LoadWAV*(filename: cstring; spec: PAudioSpec; audio_buf: ptr byte; \u000D\u000A              audiolen: PUInt32): PAudioSpec"
  }, 
  {
    "name": "FreeWAV", 
    "type": "skProc", 
    "code": "proc FreeWAV*(audio_buf: ptr byte) {.cdecl, importc: \"SDL_FreeWAV\", \u000D\u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "BuildAudioCVT", 
    "type": "skProc", 
    "code": "proc BuildAudioCVT*(cvt: PAudioCVT; src_format: UInt16; src_channels: byte; \u000D\u000A                    src_rate: int; dst_format: UInt16; dst_channels: byte; \u000D\u000A                    dst_rate: int): int {.cdecl, importc: \"SDL_BuildAudioCVT\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "ConvertAudio", 
    "type": "skProc", 
    "code": "proc ConvertAudio*(cvt: PAudioCVT): int {.cdecl, importc: \"SDL_ConvertAudio\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "MixAudio", 
    "type": "skProc", 
    "code": "proc MixAudio*(dst, src: ptr byte; length: int32; volume: int) {.cdecl, \u000D\u000A    importc: \"SDL_MixAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "LockAudio", 
    "type": "skProc", 
    "code": "proc LockAudio*() {.cdecl, importc: \"SDL_LockAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "UnlockAudio", 
    "type": "skProc", 
    "code": "proc UnlockAudio*() {.cdecl, importc: \"SDL_UnlockAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "CloseAudio", 
    "type": "skProc", 
    "code": "proc CloseAudio*() {.cdecl, importc: \"SDL_CloseAudio\", dynlib: LibName.}"
  }, 
  {
    "name": "CDNumDrives", 
    "type": "skProc", 
    "code": "proc CDNumDrives*(): int {.cdecl, importc: \"SDL_CDNumDrives\", dynlib: LibName.}"
  }, 
  {
    "name": "CDName", 
    "type": "skProc", 
    "code": "proc CDName*(drive: int): cstring {.cdecl, importc: \"SDL_CDName\", \u000D\u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "CDOpen", 
    "type": "skProc", 
    "code": "proc CDOpen*(drive: int): PCD {.cdecl, importc: \"SDL_CDOpen\", dynlib: LibName.}"
  }, 
  {
    "name": "CDStatus", 
    "type": "skProc", 
    "code": "proc CDStatus*(cdrom: PCD): TCDStatus {.cdecl, importc: \"SDL_CDStatus\", \u000D\u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "CDPlayTracks", 
    "type": "skProc", 
    "code": "proc CDPlayTracks*(cdrom: PCD; start_track: int; start_frame: int; ntracks: int; \u000D\u000A                   nframes: int): int {.cdecl, importc: \"SDL_CDPlayTracks\", \u000D\u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "CDPlay", 
    "type": "skProc", 
    "code": "proc CDPlay*(cdrom: PCD; start: int; len: int): int {.cdecl, \u000D\u000A    importc: \"SDL_CDPlay\", dynlib: LibName.}"
  }, 
  {
    "name": "CDPause", 
    "type": "skProc", 
    "code": "proc CDPause*(cdrom: PCD): int {.cdecl, importc: \"SDL_CDPause\", dynlib: LibName.}"
  }, 
  {
    "name": "CDResume", 
    "type": "skProc", 
    "code": "proc CDResume*(cdrom: PCD): int {.cdecl, importc: \"SDL_CDResume\", \u000D\u000A                                  dynlib: LibName.}"
  }, 
  {
    "name": "CDStop", 
    "type": "skProc", 
    "code": "proc CDStop*(cdrom: PCD): int {.cdecl, importc: \"SDL_CDStop\", dynlib: LibName.}"
  }, 
  {
    "name": "CDEject", 
    "type": "skProc", 
    "code": "proc CDEject*(cdrom: PCD): int {.cdecl, importc: \"SDL_CDEject\", dynlib: LibName.}"
  }, 
  {
    "name": "CDClose", 
    "type": "skProc", 
    "code": "proc CDClose*(cdrom: PCD) {.cdecl, importc: \"SDL_CDClose\", dynlib: LibName.}"
  }, 
  {
    "name": "CDInDrive", 
    "type": "skProc", 
    "code": "proc CDInDrive*(status: TCDStatus): bool"
  }, 
  {
    "name": "FRAMES_TO_MSF", 
    "type": "skProc", 
    "code": "proc FRAMES_TO_MSF*(frames: int; M: var int; S: var int; F: var int)"
  }, 
  {
    "name": "MSF_TO_FRAMES", 
    "type": "skProc", 
    "code": "proc MSF_TO_FRAMES*(M: int; S: int; F: int): int"
  }, 
  {
    "name": "NumJoysticks", 
    "type": "skProc", 
    "code": "proc NumJoysticks*(): int {.cdecl, importc: \"SDL_NumJoysticks\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickName", 
    "type": "skProc", 
    "code": "proc JoystickName*(index: int): cstring {.cdecl, importc: \"SDL_JoystickName\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "JoystickOpen", 
    "type": "skProc", 
    "code": "proc JoystickOpen*(index: int): PJoystick {.cdecl, importc: \"SDL_JoystickOpen\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "JoystickOpened", 
    "type": "skProc", 
    "code": "proc JoystickOpened*(index: int): int {.cdecl, importc: \"SDL_JoystickOpened\", \u000D\u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "JoystickIndex", 
    "type": "skProc", 
    "code": "proc JoystickIndex*(joystick: PJoystick): int {.cdecl, \u000D\u000A    importc: \"SDL_JoystickIndex\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickNumAxes", 
    "type": "skProc", 
    "code": "proc JoystickNumAxes*(joystick: PJoystick): int {.cdecl, \u000D\u000A    importc: \"SDL_JoystickNumAxes\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickNumBalls", 
    "type": "skProc", 
    "code": "proc JoystickNumBalls*(joystick: PJoystick): int {.cdecl, \u000D\u000A    importc: \"SDL_JoystickNumBalls\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickNumHats", 
    "type": "skProc", 
    "code": "proc JoystickNumHats*(joystick: PJoystick): int {.cdecl, \u000D\u000A    importc: \"SDL_JoystickNumHats\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickNumButtons", 
    "type": "skProc", 
    "code": "proc JoystickNumButtons*(joystick: PJoystick): int {.cdecl, \u000D\u000A    importc: \"SDL_JoystickNumButtons\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickUpdate", 
    "type": "skProc", 
    "code": "proc JoystickUpdate*() {.cdecl, importc: \"SDL_JoystickUpdate\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickEventState", 
    "type": "skProc", 
    "code": "proc JoystickEventState*(state: int): int {.cdecl, \u000D\u000A    importc: \"SDL_JoystickEventState\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickGetAxis", 
    "type": "skProc", 
    "code": "proc JoystickGetAxis*(joystick: PJoystick; axis: int): int16 {.cdecl, \u000D\u000A    importc: \"SDL_JoystickGetAxis\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickGetHat", 
    "type": "skProc", 
    "code": "proc JoystickGetHat*(joystick: PJoystick; hat: int): byte {.cdecl, \u000D\u000A    importc: \"SDL_JoystickGetHat\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickGetBall", 
    "type": "skProc", 
    "code": "proc JoystickGetBall*(joystick: PJoystick; ball: int; dx: var int; dy: var int): int {.\u000D\u000A    cdecl, importc: \"SDL_JoystickGetBall\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickGetButton", 
    "type": "skProc", 
    "code": "proc JoystickGetButton*(joystick: PJoystick; Button: int): byte {.cdecl, \u000D\u000A    importc: \"SDL_JoystickGetButton\", dynlib: LibName.}"
  }, 
  {
    "name": "JoystickClose", 
    "type": "skProc", 
    "code": "proc JoystickClose*(joystick: PJoystick) {.cdecl, importc: \"SDL_JoystickClose\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "PumpEvents", 
    "type": "skProc", 
    "code": "proc PumpEvents*() {.cdecl, importc: \"SDL_PumpEvents\", dynlib: LibName.}"
  }, 
  {
    "name": "PeepEvents", 
    "type": "skProc", 
    "code": "proc PeepEvents*(events: PEvent; numevents: int; action: Teventaction; \u000D\u000A                 mask: int32): int {.cdecl, importc: \"SDL_PeepEvents\", \u000D\u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "PollEvent", 
    "type": "skProc", 
    "code": "proc PollEvent*(event: PEvent): int {.cdecl, importc: \"SDL_PollEvent\", \u000D\u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "WaitEvent", 
    "type": "skProc", 
    "code": "proc WaitEvent*(event: PEvent): int {.cdecl, importc: \"SDL_WaitEvent\", \u000D\u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "PushEvent", 
    "type": "skProc", 
    "code": "proc PushEvent*(event: PEvent): int {.cdecl, importc: \"SDL_PushEvent\", \u000D\u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "SetEventFilter", 
    "type": "skProc", 
    "code": "proc SetEventFilter*(filter: TEventFilter) {.cdecl, \u000D\u000A    importc: \"SDL_SetEventFilter\", dynlib: LibName.}"
  }, 
  {
    "name": "GetEventFilter", 
    "type": "skProc", 
    "code": "proc GetEventFilter*(): TEventFilter {.cdecl, importc: \"SDL_GetEventFilter\", \u000D\u000A                                       dynlib: LibName.}"
  }, 
  {
    "name": "EventState", 
    "type": "skProc", 
    "code": "proc EventState*(theType: byte; state: int): byte {.cdecl, \u000D\u000A    importc: \"SDL_EventState\", dynlib: LibName.}"
  }, 
  {
    "name": "VERSION", 
    "type": "skProc", 
    "code": "proc VERSION*(X: var TVersion)"
  }, 
  {
    "name": "VERSIONNUM", 
    "type": "skProc", 
    "code": "proc VERSIONNUM*(X, Y, Z: int): int"
  }, 
  {
    "name": "COMPILEDVERSION", 
    "type": "skProc", 
    "code": "proc COMPILEDVERSION*(): int"
  }, 
  {
    "name": "VERSION_ATLEAST", 
    "type": "skProc", 
    "code": "proc VERSION_ATLEAST*(X: int; Y: int; Z: int): bool"
  }, 
  {
    "name": "Linked_Version", 
    "type": "skProc", 
    "code": "proc Linked_Version*(): Pversion {.cdecl, importc: \"SDL_Linked_Version\", \u000D\u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "VideoInit", 
    "type": "skProc", 
    "code": "proc VideoInit*(driver_name: cstring; flags: int32): int {.cdecl, \u000D\u000A    importc: \"SDL_VideoInit\", dynlib: LibName.}"
  }, 
  {
    "name": "VideoQuit", 
    "type": "skProc", 
    "code": "proc VideoQuit*() {.cdecl, importc: \"SDL_VideoQuit\", dynlib: LibName.}"
  }, 
  {
    "name": "VideoDriverName", 
    "type": "skProc", 
    "code": "proc VideoDriverName*(namebuf: cstring; maxlen: int): cstring {.cdecl, \u000D\u000A    importc: \"SDL_VideoDriverName\", dynlib: LibName.}"
  }, 
  {
    "name": "GetVideoSurface", 
    "type": "skProc", 
    "code": "proc GetVideoSurface*(): PSurface {.cdecl, importc: \"SDL_GetVideoSurface\", \u000D\u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "GetVideoInfo", 
    "type": "skProc", 
    "code": "proc GetVideoInfo*(): PVideoInfo {.cdecl, importc: \"SDL_GetVideoInfo\", \u000D\u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "VideoModeOK", 
    "type": "skProc", 
    "code": "proc VideoModeOK*(width, height, bpp: int; flags: int32): int {.cdecl, \u000D\u000A    importc: \"SDL_VideoModeOK\", importc: \"SDL_VideoModeOK\", dynlib: LibName.}"
  }, 
  {
    "name": "ListModes", 
    "type": "skProc", 
    "code": "proc ListModes*(format: PPixelFormat; flags: int32): PPSDL_Rect {.cdecl, \u000D\u000A    importc: \"SDL_ListModes\", dynlib: LibName.}"
  }, 
  {
    "name": "SetVideoMode", 
    "type": "skProc", 
    "code": "proc SetVideoMode*(width, height, bpp: int; flags: uint32): PSurface {.cdecl, \u000D\u000A    importc: \"SDL_SetVideoMode\", dynlib: LibName.}"
  }, 
  {
    "name": "UpdateRects", 
    "type": "skProc", 
    "code": "proc UpdateRects*(screen: PSurface; numrects: int; rects: PRect) {.cdecl, \u000D\u000A    importc: \"SDL_UpdateRects\", dynlib: LibName.}"
  }, 
  {
    "name": "UpdateRect", 
    "type": "skProc", 
    "code": "proc UpdateRect*(screen: PSurface; x, y: int32; w, h: int32) {.cdecl, \u000D\u000A    importc: \"SDL_UpdateRect\", dynlib: LibName.}"
  }, 
  {
    "name": "Flip", 
    "type": "skProc", 
    "code": "proc Flip*(screen: PSurface): int {.cdecl, importc: \"SDL_Flip\", dynlib: LibName.}"
  }, 
  {
    "name": "SetGamma", 
    "type": "skProc", 
    "code": "proc SetGamma*(redgamma: float32; greengamma: float32; bluegamma: float32): int {.\u000D\u000A    cdecl, importc: \"SDL_SetGamma\", dynlib: LibName.}"
  }, 
  {
    "name": "SetGammaRamp", 
    "type": "skProc", 
    "code": "proc SetGammaRamp*(redtable: PUInt16; greentable: PUInt16; bluetable: PUInt16): int {.\u000D\u000A    cdecl, importc: \"SDL_SetGammaRamp\", dynlib: LibName.}"
  }, 
  {
    "name": "GetGammaRamp", 
    "type": "skProc", 
    "code": "proc GetGammaRamp*(redtable: PUInt16; greentable: PUInt16; bluetable: PUInt16): int {.\u000D\u000A    cdecl, importc: \"SDL_GetGammaRamp\", dynlib: LibName.}"
  }, 
  {
    "name": "SetColors", 
    "type": "skProc", 
    "code": "proc SetColors*(surface: PSurface; colors: PColor; firstcolor: int; ncolors: int): int {.\u000D\u000A    cdecl, importc: \"SDL_SetColors\", dynlib: LibName.}"
  }, 
  {
    "name": "SetPalette", 
    "type": "skProc", 
    "code": "proc SetPalette*(surface: PSurface; flags: int; colors: PColor; firstcolor: int; \u000D\u000A                 ncolors: int): int {.cdecl, importc: \"SDL_SetPalette\", \u000D\u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "MapRGB", 
    "type": "skProc", 
    "code": "proc MapRGB*(format: PPixelFormat; r: byte; g: byte; b: byte): int32 {.cdecl, \u000D\u000A    importc: \"SDL_MapRGB\", dynlib: LibName.}"
  }, 
  {
    "name": "MapRGBA", 
    "type": "skProc", 
    "code": "proc MapRGBA*(format: PPixelFormat; r: byte; g: byte; b: byte; a: byte): int32 {.\u000D\u000A    cdecl, importc: \"SDL_MapRGBA\", dynlib: LibName.}"
  }, 
  {
    "name": "GetRGB", 
    "type": "skProc", 
    "code": "proc GetRGB*(pixel: int32; fmt: PPixelFormat; r: ptr byte; g: ptr byte; \u000D\u000A             b: ptr byte) {.cdecl, importc: \"SDL_GetRGB\", dynlib: LibName.}"
  }, 
  {
    "name": "GetRGBA", 
    "type": "skProc", 
    "code": "proc GetRGBA*(pixel: int32; fmt: PPixelFormat; r: ptr byte; g: ptr byte; \u000D\u000A              b: ptr byte; a: ptr byte) {.cdecl, importc: \"SDL_GetRGBA\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "AllocSurface", 
    "type": "skProc", 
    "code": "proc AllocSurface*(flags: int32; width, height, depth: int; \u000D\u000A                   RMask, GMask, BMask, AMask: int32): PSurface"
  }, 
  {
    "name": "CreateRGBSurface", 
    "type": "skProc", 
    "code": "proc CreateRGBSurface*(flags: int32; width, height, depth: int; \u000D\u000A                       RMask, GMask, BMask, AMask: int32): PSurface {.cdecl, \u000D\u000A    importc: \"SDL_CreateRGBSurface\", dynlib: LibName.}"
  }, 
  {
    "name": "CreateRGBSurfaceFrom", 
    "type": "skProc", 
    "code": "proc CreateRGBSurfaceFrom*(pixels: Pointer; width, height, depth, pitch: int; \u000D\u000A                           RMask, GMask, BMask, AMask: int32): PSurface {.cdecl, \u000D\u000A    importc: \"SDL_CreateRGBSurfaceFrom\", dynlib: LibName.}"
  }, 
  {
    "name": "FreeSurface", 
    "type": "skProc", 
    "code": "proc FreeSurface*(surface: PSurface) {.cdecl, importc: \"SDL_FreeSurface\", \u000D\u000A                                       dynlib: LibName.}"
  }, 
  {
    "name": "MustLock", 
    "type": "skProc", 
    "code": "proc MustLock*(Surface: PSurface): bool"
  }, 
  {
    "name": "LockSurface", 
    "type": "skProc", 
    "code": "proc LockSurface*(surface: PSurface): int {.cdecl, importc: \"SDL_LockSurface\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "UnlockSurface", 
    "type": "skProc", 
    "code": "proc UnlockSurface*(surface: PSurface) {.cdecl, importc: \"SDL_UnlockSurface\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "LoadBMP_RW", 
    "type": "skProc", 
    "code": "proc LoadBMP_RW*(src: PRWops; freesrc: int): PSurface {.cdecl, \u000D\u000A    importc: \"SDL_LoadBMP_RW\", dynlib: LibName.}"
  }, 
  {
    "name": "LoadBMP", 
    "type": "skProc", 
    "code": "proc LoadBMP*(filename: cstring): PSurface"
  }, 
  {
    "name": "SaveBMP_RW", 
    "type": "skProc", 
    "code": "proc SaveBMP_RW*(surface: PSurface; dst: PRWops; freedst: int): int {.cdecl, \u000D\u000A    importc: \"SDL_SaveBMP_RW\", dynlib: LibName.}"
  }, 
  {
    "name": "SaveBMP", 
    "type": "skProc", 
    "code": "proc SaveBMP*(surface: PSurface; filename: cstring): int"
  }, 
  {
    "name": "SetColorKey", 
    "type": "skProc", 
    "code": "proc SetColorKey*(surface: PSurface; flag, key: int32): int {.cdecl, \u000D\u000A    importc: \"SDL_SetColorKey\", dynlib: LibName.}"
  }, 
  {
    "name": "SetAlpha", 
    "type": "skProc", 
    "code": "proc SetAlpha*(surface: PSurface; flag: int32; alpha: byte): int {.cdecl, \u000D\u000A    importc: \"SDL_SetAlpha\", dynlib: LibName.}"
  }, 
  {
    "name": "SetClipRect", 
    "type": "skProc", 
    "code": "proc SetClipRect*(surface: PSurface; rect: PRect) {.cdecl, \u000D\u000A    importc: \"SDL_SetClipRect\", dynlib: LibName.}"
  }, 
  {
    "name": "GetClipRect", 
    "type": "skProc", 
    "code": "proc GetClipRect*(surface: PSurface; rect: PRect) {.cdecl, \u000D\u000A    importc: \"SDL_GetClipRect\", dynlib: LibName.}"
  }, 
  {
    "name": "ConvertSurface", 
    "type": "skProc", 
    "code": "proc ConvertSurface*(src: PSurface; fmt: PPixelFormat; flags: int32): PSurface {.\u000D\u000A    cdecl, importc: \"SDL_ConvertSurface\", dynlib: LibName.}"
  }, 
  {
    "name": "BlitSurface", 
    "type": "skProc", 
    "code": "proc BlitSurface*(src: PSurface; srcrect: PRect; dst: PSurface; dstrect: PRect): int"
  }, 
  {
    "name": "UpperBlit", 
    "type": "skProc", 
    "code": "proc UpperBlit*(src: PSurface; srcrect: PRect; dst: PSurface; dstrect: PRect): int {.\u000D\u000A    cdecl, importc: \"SDL_UpperBlit\", dynlib: LibName.}"
  }, 
  {
    "name": "LowerBlit", 
    "type": "skProc", 
    "code": "proc LowerBlit*(src: PSurface; srcrect: PRect; dst: PSurface; dstrect: PRect): int {.\u000D\u000A    cdecl, importc: \"SDL_LowerBlit\", dynlib: LibName.}"
  }, 
  {
    "name": "FillRect", 
    "type": "skProc", 
    "code": "proc FillRect*(dst: PSurface; dstrect: PRect; color: int32): int {.cdecl, \u000D\u000A    importc: \"SDL_FillRect\", dynlib: LibName.}"
  }, 
  {
    "name": "DisplayFormat", 
    "type": "skProc", 
    "code": "proc DisplayFormat*(surface: PSurface): PSurface {.cdecl, \u000D\u000A    importc: \"SDL_DisplayFormat\", dynlib: LibName.}"
  }, 
  {
    "name": "DisplayFormatAlpha", 
    "type": "skProc", 
    "code": "proc DisplayFormatAlpha*(surface: PSurface): PSurface {.cdecl, \u000D\u000A    importc: \"SDL_DisplayFormatAlpha\", dynlib: LibName.}"
  }, 
  {
    "name": "CreateYUVOverlay", 
    "type": "skProc", 
    "code": "proc CreateYUVOverlay*(width: int; height: int; format: int32; display: PSurface): POverlay {.\u000D\u000A    cdecl, importc: \"SDL_CreateYUVOverlay\", dynlib: LibName.}"
  }, 
  {
    "name": "LockYUVOverlay", 
    "type": "skProc", 
    "code": "proc LockYUVOverlay*(Overlay: POverlay): int {.cdecl, \u000D\u000A    importc: \"SDL_LockYUVOverlay\", dynlib: LibName.}"
  }, 
  {
    "name": "UnlockYUVOverlay", 
    "type": "skProc", 
    "code": "proc UnlockYUVOverlay*(Overlay: POverlay) {.cdecl, \u000D\u000A    importc: \"SDL_UnlockYUVOverlay\", dynlib: LibName.}"
  }, 
  {
    "name": "DisplayYUVOverlay", 
    "type": "skProc", 
    "code": "proc DisplayYUVOverlay*(Overlay: POverlay; dstrect: PRect): int {.cdecl, \u000D\u000A    importc: \"SDL_DisplayYUVOverlay\", dynlib: LibName.}"
  }, 
  {
    "name": "FreeYUVOverlay", 
    "type": "skProc", 
    "code": "proc FreeYUVOverlay*(Overlay: POverlay) {.cdecl, importc: \"SDL_FreeYUVOverlay\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "GL_LoadLibrary", 
    "type": "skProc", 
    "code": "proc GL_LoadLibrary*(filename: cstring): int {.cdecl, \u000D\u000A    importc: \"SDL_GL_LoadLibrary\", dynlib: LibName.}"
  }, 
  {
    "name": "GL_GetProcAddress", 
    "type": "skProc", 
    "code": "proc GL_GetProcAddress*(procname: cstring): Pointer {.cdecl, \u000D\u000A    importc: \"SDL_GL_GetProcAddress\", dynlib: LibName.}"
  }, 
  {
    "name": "GL_SetAttribute", 
    "type": "skProc", 
    "code": "proc GL_SetAttribute*(attr: TGLAttr; value: int): int {.cdecl, \u000D\u000A    importc: \"SDL_GL_SetAttribute\", dynlib: LibName.}"
  }, 
  {
    "name": "GL_GetAttribute", 
    "type": "skProc", 
    "code": "proc GL_GetAttribute*(attr: TGLAttr; value: var int): int {.cdecl, \u000D\u000A    importc: \"SDL_GL_GetAttribute\", dynlib: LibName.}"
  }, 
  {
    "name": "GL_SwapBuffers", 
    "type": "skProc", 
    "code": "proc GL_SwapBuffers*() {.cdecl, importc: \"SDL_GL_SwapBuffers\", dynlib: LibName.}"
  }, 
  {
    "name": "GL_UpdateRects", 
    "type": "skProc", 
    "code": "proc GL_UpdateRects*(numrects: int; rects: PRect) {.cdecl, \u000D\u000A    importc: \"SDL_GL_UpdateRects\", dynlib: LibName.}"
  }, 
  {
    "name": "GL_Lock", 
    "type": "skProc", 
    "code": "proc GL_Lock*() {.cdecl, importc: \"SDL_GL_Lock\", dynlib: LibName.}"
  }, 
  {
    "name": "GL_Unlock", 
    "type": "skProc", 
    "code": "proc GL_Unlock*() {.cdecl, importc: \"SDL_GL_Unlock\", dynlib: LibName.}"
  }, 
  {
    "name": "WM_GetCaption", 
    "type": "skProc", 
    "code": "proc WM_GetCaption*(title: var cstring; icon: var cstring) {.cdecl, \u000D\u000A    importc: \"SDL_WM_GetCaption\", dynlib: LibName.}"
  }, 
  {
    "name": "WM_SetCaption", 
    "type": "skProc", 
    "code": "proc WM_SetCaption*(title: cstring; icon: cstring) {.cdecl, \u000D\u000A    importc: \"SDL_WM_SetCaption\", dynlib: LibName.}"
  }, 
  {
    "name": "WM_SetIcon", 
    "type": "skProc", 
    "code": "proc WM_SetIcon*(icon: PSurface; mask: byte) {.cdecl, importc: \"SDL_WM_SetIcon\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "WM_IconifyWindow", 
    "type": "skProc", 
    "code": "proc WM_IconifyWindow*(): int {.cdecl, importc: \"SDL_WM_IconifyWindow\", \u000D\u000A                                dynlib: LibName.}"
  }, 
  {
    "name": "WM_ToggleFullScreen", 
    "type": "skProc", 
    "code": "proc WM_ToggleFullScreen*(surface: PSurface): int {.cdecl, \u000D\u000A    importc: \"SDL_WM_ToggleFullScreen\", dynlib: LibName.}"
  }, 
  {
    "name": "WM_GrabInput", 
    "type": "skProc", 
    "code": "proc WM_GrabInput*(mode: TGrabMode): TGrabMode {.cdecl, \u000D\u000A    importc: \"SDL_WM_GrabInput\", dynlib: LibName.}"
  }, 
  {
    "name": "GetMouseState", 
    "type": "skProc", 
    "code": "proc GetMouseState*(x: var int; y: var int): byte {.cdecl, \u000D\u000A    importc: \"SDL_GetMouseState\", dynlib: LibName.}"
  }, 
  {
    "name": "GetRelativeMouseState", 
    "type": "skProc", 
    "code": "proc GetRelativeMouseState*(x: var int; y: var int): byte {.cdecl, \u000D\u000A    importc: \"SDL_GetRelativeMouseState\", dynlib: LibName.}"
  }, 
  {
    "name": "WarpMouse", 
    "type": "skProc", 
    "code": "proc WarpMouse*(x, y: UInt16) {.cdecl, importc: \"SDL_WarpMouse\", dynlib: LibName.}"
  }, 
  {
    "name": "CreateCursor", 
    "type": "skProc", 
    "code": "proc CreateCursor*(data, mask: ptr byte; w, h, hot_x, hot_y: int): PCursor {.\u000D\u000A    cdecl, importc: \"SDL_CreateCursor\", dynlib: LibName.}"
  }, 
  {
    "name": "SetCursor", 
    "type": "skProc", 
    "code": "proc SetCursor*(cursor: PCursor) {.cdecl, importc: \"SDL_SetCursor\", \u000D\u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "GetCursor", 
    "type": "skProc", 
    "code": "proc GetCursor*(): PCursor {.cdecl, importc: \"SDL_GetCursor\", dynlib: LibName.}"
  }, 
  {
    "name": "FreeCursor", 
    "type": "skProc", 
    "code": "proc FreeCursor*(cursor: PCursor) {.cdecl, importc: \"SDL_FreeCursor\", \u000D\u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "ShowCursor", 
    "type": "skProc", 
    "code": "proc ShowCursor*(toggle: int): int {.cdecl, importc: \"SDL_ShowCursor\", \u000D\u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "BUTTON", 
    "type": "skProc", 
    "code": "proc BUTTON*(Button: int): int"
  }, 
  {
    "name": "EnableUNICODE", 
    "type": "skProc", 
    "code": "proc EnableUNICODE*(enable: int): int {.cdecl, importc: \"SDL_EnableUNICODE\", \u000D\u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "EnableKeyRepeat", 
    "type": "skProc", 
    "code": "proc EnableKeyRepeat*(delay: int; interval: int): int {.cdecl, \u000D\u000A    importc: \"SDL_EnableKeyRepeat\", dynlib: LibName.}"
  }, 
  {
    "name": "GetKeyRepeat", 
    "type": "skProc", 
    "code": "proc GetKeyRepeat*(delay: PInteger; interval: PInteger) {.cdecl, \u000D\u000A    importc: \"SDL_GetKeyRepeat\", dynlib: LibName.}"
  }, 
  {
    "name": "GetKeyState", 
    "type": "skProc", 
    "code": "proc GetKeyState*(numkeys: pointer): ptr byte {.cdecl, \u000D\u000A    importc: \"SDL_GetKeyState\", dynlib: LibName.}"
  }, 
  {
    "name": "GetModState", 
    "type": "skProc", 
    "code": "proc GetModState*(): TMod {.cdecl, importc: \"SDL_GetModState\", dynlib: LibName.}"
  }, 
  {
    "name": "SetModState", 
    "type": "skProc", 
    "code": "proc SetModState*(modstate: TMod) {.cdecl, importc: \"SDL_SetModState\", \u000D\u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "GetKeyName", 
    "type": "skProc", 
    "code": "proc GetKeyName*(key: TKey): cstring {.cdecl, importc: \"SDL_GetKeyName\", \u000D\u000A                                       dynlib: LibName.}"
  }, 
  {
    "name": "GetAppState", 
    "type": "skProc", 
    "code": "proc GetAppState*(): byte {.cdecl, importc: \"SDL_GetAppState\", dynlib: LibName.}"
  }, 
  {
    "name": "CreateMutex", 
    "type": "skProc", 
    "code": "proc CreateMutex*(): PMutex {.cdecl, importc: \"SDL_CreateMutex\", dynlib: LibName.}"
  }, 
  {
    "name": "mutexP", 
    "type": "skProc", 
    "code": "proc mutexP*(mutex: Pmutex): int {.cdecl, importc: \"SDL_mutexP\", dynlib: LibName.}"
  }, 
  {
    "name": "LockMutex", 
    "type": "skProc", 
    "code": "proc LockMutex*(mutex: Pmutex): int"
  }, 
  {
    "name": "mutexV", 
    "type": "skProc", 
    "code": "proc mutexV*(mutex: Pmutex): int {.cdecl, importc: \"SDL_mutexV\", dynlib: LibName.}"
  }, 
  {
    "name": "UnlockMutex", 
    "type": "skProc", 
    "code": "proc UnlockMutex*(mutex: Pmutex): int"
  }, 
  {
    "name": "DestroyMutex", 
    "type": "skProc", 
    "code": "proc DestroyMutex*(mutex: Pmutex) {.cdecl, importc: \"SDL_DestroyMutex\", \u000D\u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "CreateSemaphore", 
    "type": "skProc", 
    "code": "proc CreateSemaphore*(initial_value: int32): PSem {.cdecl, \u000D\u000A    importc: \"SDL_CreateSemaphore\", dynlib: LibName.}"
  }, 
  {
    "name": "DestroySemaphore", 
    "type": "skProc", 
    "code": "proc DestroySemaphore*(sem: Psem) {.cdecl, importc: \"SDL_DestroySemaphore\", \u000D\u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "SemWait", 
    "type": "skProc", 
    "code": "proc SemWait*(sem: Psem): int {.cdecl, importc: \"SDL_SemWait\", dynlib: LibName.}"
  }, 
  {
    "name": "SemTryWait", 
    "type": "skProc", 
    "code": "proc SemTryWait*(sem: Psem): int {.cdecl, importc: \"SDL_SemTryWait\", \u000D\u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "SemWaitTimeout", 
    "type": "skProc", 
    "code": "proc SemWaitTimeout*(sem: Psem; ms: int32): int {.cdecl, \u000D\u000A    importc: \"SDL_SemWaitTimeout\", dynlib: LibName.}"
  }, 
  {
    "name": "SemPost", 
    "type": "skProc", 
    "code": "proc SemPost*(sem: Psem): int {.cdecl, importc: \"SDL_SemPost\", dynlib: LibName.}"
  }, 
  {
    "name": "SemValue", 
    "type": "skProc", 
    "code": "proc SemValue*(sem: Psem): int32 {.cdecl, importc: \"SDL_SemValue\", \u000D\u000A                                   dynlib: LibName.}"
  }, 
  {
    "name": "CreateCond", 
    "type": "skProc", 
    "code": "proc CreateCond*(): PCond {.cdecl, importc: \"SDL_CreateCond\", dynlib: LibName.}"
  }, 
  {
    "name": "DestroyCond", 
    "type": "skProc", 
    "code": "proc DestroyCond*(cond: PCond) {.cdecl, importc: \"SDL_DestroyCond\", \u000D\u000A                                 dynlib: LibName.}"
  }, 
  {
    "name": "CondSignal", 
    "type": "skProc", 
    "code": "proc CondSignal*(cond: Pcond): int {.cdecl, importc: \"SDL_CondSignal\", \u000D\u000A                                     dynlib: LibName.}"
  }, 
  {
    "name": "CondBroadcast", 
    "type": "skProc", 
    "code": "proc CondBroadcast*(cond: Pcond): int {.cdecl, importc: \"SDL_CondBroadcast\", \u000D\u000A                                        dynlib: LibName.}"
  }, 
  {
    "name": "CondWait", 
    "type": "skProc", 
    "code": "proc CondWait*(cond: Pcond; mut: Pmutex): int {.cdecl, importc: \"SDL_CondWait\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "CondWaitTimeout", 
    "type": "skProc", 
    "code": "proc CondWaitTimeout*(cond: Pcond; mut: Pmutex; ms: int32): int {.cdecl, \u000D\u000A    importc: \"SDL_CondWaitTimeout\", dynlib: LibName.}"
  }, 
  {
    "name": "CreateThread", 
    "type": "skProc", 
    "code": "proc CreateThread*(fn, data: Pointer): PThread {.cdecl, \u000D\u000A    importc: \"SDL_CreateThread\", dynlib: LibName.}"
  }, 
  {
    "name": "ThreadID", 
    "type": "skProc", 
    "code": "proc ThreadID*(): int32 {.cdecl, importc: \"SDL_ThreadID\", dynlib: LibName.}"
  }, 
  {
    "name": "GetThreadID", 
    "type": "skProc", 
    "code": "proc GetThreadID*(thread: PThread): int32 {.cdecl, importc: \"SDL_GetThreadID\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "WaitThread", 
    "type": "skProc", 
    "code": "proc WaitThread*(thread: PThread; status: var int) {.cdecl, \u000D\u000A    importc: \"SDL_WaitThread\", dynlib: LibName.}"
  }, 
  {
    "name": "KillThread", 
    "type": "skProc", 
    "code": "proc KillThread*(thread: PThread) {.cdecl, importc: \"SDL_KillThread\", \u000D\u000A                                    dynlib: LibName.}"
  }, 
  {
    "name": "GetWMInfo", 
    "type": "skProc", 
    "code": "proc GetWMInfo*(info: PSysWMinfo): int {.cdecl, importc: \"SDL_GetWMInfo\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "LoadObject", 
    "type": "skProc", 
    "code": "proc LoadObject*(sofile: cstring): Pointer {.cdecl, importc: \"SDL_LoadObject\", \u000D\u000A    dynlib: LibName.}"
  }, 
  {
    "name": "LoadFunction", 
    "type": "skProc", 
    "code": "proc LoadFunction*(handle: Pointer; name: cstring): Pointer {.cdecl, \u000D\u000A    importc: \"SDL_LoadFunction\", dynlib: LibName.}"
  }, 
  {
    "name": "UnloadObject", 
    "type": "skProc", 
    "code": "proc UnloadObject*(handle: Pointer) {.cdecl, importc: \"SDL_UnloadObject\", \u000D\u000A                                      dynlib: LibName.}"
  }, 
  {
    "name": "Swap32", 
    "type": "skProc", 
    "code": "proc Swap32*(D: int32): int32"
  }, 
  {
    "name": "IsBitOn", 
    "type": "skProc", 
    "code": "proc IsBitOn*(value: int; bit: int8): bool"
  }, 
  {
    "name": "TurnBitOn", 
    "type": "skProc", 
    "code": "proc TurnBitOn*(value: int; bit: int8): int"
  }, 
  {
    "name": "TurnBitOff", 
    "type": "skProc", 
    "code": "proc TurnBitOff*(value: int; bit: int8): int"
  }
]