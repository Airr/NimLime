[
  {
    "comment": "OpenSSL support"
  }, 
  {
    "name": "des_key_schedule", 
    "type": "skType", 
    "code": "des_key_schedule* = array[1 .. 16, des_ks_struct]"
  }, 
  {
    "name": "SSL_library_init", 
    "type": "skProc", 
    "code": "proc SSL_library_init*(): cInt {.cdecl, dynlib: DLLSSLName, importc, discardable.}"
  }, 
  {
    "name": "SSL_load_error_strings", 
    "type": "skProc", 
    "code": "proc SSL_load_error_strings*() {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "ERR_load_BIO_strings", 
    "type": "skProc", 
    "code": "proc ERR_load_BIO_strings*() {.cdecl, dynlib: DLLUtilName, importc.}"
  }, 
  {
    "name": "SSLv23_client_method", 
    "type": "skProc", 
    "code": "proc SSLv23_client_method*(): PSSL_METHOD {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSLv23_method", 
    "type": "skProc", 
    "code": "proc SSLv23_method*(): PSSL_METHOD {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSLv2_method", 
    "type": "skProc", 
    "code": "proc SSLv2_method*(): PSSL_METHOD {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSLv3_method", 
    "type": "skProc", 
    "code": "proc SSLv3_method*(): PSSL_METHOD {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "TLSv1_method", 
    "type": "skProc", 
    "code": "proc TLSv1_method*(): PSSL_METHOD {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_new", 
    "type": "skProc", 
    "code": "proc SSL_new*(context: PSSL_CTX): PSSL {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_free", 
    "type": "skProc", 
    "code": "proc SSL_free*(ssl: PSSL) {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_CTX_new", 
    "type": "skProc", 
    "code": "proc SSL_CTX_new*(meth: PSSL_METHOD): PSSL_CTX {.cdecl, dynlib: DLLSSLName, \u000D\u000A    importc.}"
  }, 
  {
    "name": "SSL_CTX_load_verify_locations", 
    "type": "skProc", 
    "code": "proc SSL_CTX_load_verify_locations*(ctx: PSSL_CTX; CAfile: cstring; \u000D\u000A                                    CApath: cstring): cInt {.cdecl, \u000D\u000A    dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_CTX_free", 
    "type": "skProc", 
    "code": "proc SSL_CTX_free*(arg0: PSSL_CTX) {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_CTX_set_verify", 
    "type": "skProc", 
    "code": "proc SSL_CTX_set_verify*(s: PSSL_CTX; mode: int; \u000D\u000A                         cb: proc (a: int; b: pointer): int {.cdecl.}) {.cdecl, \u000D\u000A    dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_get_verify_result", 
    "type": "skProc", 
    "code": "proc SSL_get_verify_result*(ssl: PSSL): int {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_CTX_set_cipher_list", 
    "type": "skProc", 
    "code": "proc SSL_CTX_set_cipher_list*(s: PSSLCTX; ciphers: cstring): cint {.cdecl, \u000D\u000A    dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_CTX_use_certificate_file", 
    "type": "skProc", 
    "code": "proc SSL_CTX_use_certificate_file*(ctx: PSSL_CTX; filename: cstring; typ: cInt): cInt {.\u000D\u000A    stdcall, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_CTX_use_certificate_chain_file", 
    "type": "skProc", 
    "code": "proc SSL_CTX_use_certificate_chain_file*(ctx: PSSL_CTX; filename: cstring): cInt {.\u000D\u000A    stdcall, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_CTX_use_PrivateKey_file", 
    "type": "skProc", 
    "code": "proc SSL_CTX_use_PrivateKey_file*(ctx: PSSL_CTX; filename: cstring; typ: cInt): cInt {.\u000D\u000A    cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_CTX_check_private_key", 
    "type": "skProc", 
    "code": "proc SSL_CTX_check_private_key*(ctx: PSSL_CTX): cInt {.cdecl, \u000D\u000A    dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_set_fd", 
    "type": "skProc", 
    "code": "proc SSL_set_fd*(ssl: PSSL; fd: TSocketHandle): cint {.cdecl, \u000D\u000A    dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_shutdown", 
    "type": "skProc", 
    "code": "proc SSL_shutdown*(ssl: PSSL): cInt {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_connect", 
    "type": "skProc", 
    "code": "proc SSL_connect*(ssl: PSSL): cint {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_read", 
    "type": "skProc", 
    "code": "proc SSL_read*(ssl: PSSL; buf: pointer; num: int): cint {.cdecl, \u000D\u000A    dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_write", 
    "type": "skProc", 
    "code": "proc SSL_write*(ssl: PSSL; buf: cstring; num: int): cint {.cdecl, \u000D\u000A    dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_get_error", 
    "type": "skProc", 
    "code": "proc SSL_get_error*(s: PSSL; ret_code: cInt): cInt {.cdecl, dynlib: DLLSSLName, \u000D\u000A    importc.}"
  }, 
  {
    "name": "SSL_accept", 
    "type": "skProc", 
    "code": "proc SSL_accept*(ssl: PSSL): cInt {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "SSL_pending", 
    "type": "skProc", 
    "code": "proc SSL_pending*(ssl: PSSL): cInt {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "BIO_new_ssl_connect", 
    "type": "skProc", 
    "code": "proc BIO_new_ssl_connect*(ctx: PSSL_CTX): PBIO {.cdecl, dynlib: DLLSSLName, \u000D\u000A    importc.}"
  }, 
  {
    "name": "BIO_ctrl", 
    "type": "skProc", 
    "code": "proc BIO_ctrl*(bio: PBIO; cmd: cint; larg: int; arg: cstring): int {.cdecl, \u000D\u000A    dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "BIO_get_ssl", 
    "type": "skProc", 
    "code": "proc BIO_get_ssl*(bio: PBIO; ssl: ptr PSSL): int"
  }, 
  {
    "name": "BIO_set_conn_hostname", 
    "type": "skProc", 
    "code": "proc BIO_set_conn_hostname*(bio: PBIO; name: cstring): int"
  }, 
  {
    "name": "BIO_do_handshake", 
    "type": "skProc", 
    "code": "proc BIO_do_handshake*(bio: PBIO): int"
  }, 
  {
    "name": "BIO_do_connect", 
    "type": "skProc", 
    "code": "proc BIO_do_connect*(bio: PBIO): int"
  }, 
  {
    "name": "BIO_read", 
    "type": "skProc", 
    "code": "proc BIO_read*(b: PBIO; data: cstring; length: cInt): cInt {.cdecl, \u000D\u000A    dynlib: DLLUtilName, importc.}"
  }, 
  {
    "name": "BIO_write", 
    "type": "skProc", 
    "code": "proc BIO_write*(b: PBIO; data: cstring; length: cInt): cInt {.cdecl, \u000D\u000A    dynlib: DLLUtilName, importc.}"
  }, 
  {
    "name": "BIO_free", 
    "type": "skProc", 
    "code": "proc BIO_free*(b: PBIO): cInt {.cdecl, dynlib: DLLUtilName, importc.}"
  }, 
  {
    "name": "ERR_print_errors_fp", 
    "type": "skProc", 
    "code": "proc ERR_print_errors_fp*(fp: TFile) {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "ERR_error_string", 
    "type": "skProc", 
    "code": "proc ERR_error_string*(e: cInt; buf: cstring): cstring {.cdecl, \u000D\u000A    dynlib: DLLUtilName, importc.}"
  }, 
  {
    "name": "ERR_get_error", 
    "type": "skProc", 
    "code": "proc ERR_get_error*(): cInt {.cdecl, dynlib: DLLUtilName, importc.}"
  }, 
  {
    "name": "ERR_peek_last_error", 
    "type": "skProc", 
    "code": "proc ERR_peek_last_error*(): cInt {.cdecl, dynlib: DLLUtilName, importc.}"
  }, 
  {
    "name": "OpenSSL_add_all_algorithms", 
    "type": "skProc", 
    "code": "proc OpenSSL_add_all_algorithms*() {.cdecl, dynlib: DLLUtilName, \u000D\u000A                                     importc: \"OPENSSL_add_all_algorithms_conf\".}"
  }, 
  {
    "name": "OPENSSL_config", 
    "type": "skProc", 
    "code": "proc OPENSSL_config*(configName: cstring) {.cdecl, dynlib: DLLSSLName, importc.}"
  }, 
  {
    "name": "CRYPTO_malloc_init", 
    "type": "skProc", 
    "code": "proc CRYPTO_malloc_init*()"
  }
]