[
  {
    "comment": "Nimrod OID support. An OID is a global ID that consists of a timestamp,\u000D\u000A## a unique counter and a random value. This combination should suffice to \u000D\u000A## produce a globally distributed unique ID. This implementation was extracted\u000D\u000A## from the Mongodb interface and it thus binary compatible with a Mongo OID.\u000D\u000A##\u000D\u000A## This implementation calls ``math.randomize()`` for the first call of\u000D\u000A## ``genOid``."
  }, 
  {
    "name": "Toid", 
    "type": "skType", 
    "description": "an OID", 
    "code": "Toid* {.pure, final.} = object \u000D\u000A  time: int32                 ## \u000D\u000A  fuzz: int32                 ## \u000D\u000A  count: int32                ## \u000D\u000A  "
  }, 
  {
    "name": "hexbyte", 
    "type": "skProc", 
    "code": "proc hexbyte*(hex: char): int"
  }, 
  {
    "name": "parseOid", 
    "type": "skProc", 
    "description": "parses an OID.", 
    "code": "proc parseOid*(str: cstring): TOid"
  }, 
  {
    "name": "oidToString", 
    "type": "skProc", 
    "code": "proc oidToString*(oid: TOid; str: cstring)"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "code": "proc `$`*(oid: TOid): string"
  }, 
  {
    "name": "genOid", 
    "type": "skProc", 
    "description": "generates a new OID.", 
    "code": "proc genOid*(): TOid"
  }, 
  {
    "name": "generatedTime", 
    "type": "skProc", 
    "description": "returns the generated timestamp of the OID.", 
    "code": "proc generatedTime*(oid: TOid): TTime"
  }
]