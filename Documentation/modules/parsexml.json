[
  {
    "comment": "This module implements a simple high performance `XML`:idx: / `HTML`:idx:\u000D\u000A## parser. \u000D\u000A## The only encoding that is supported is UTF-8. The parser has been designed\u000D\u000A## to be somewhat error correcting, so that even most \"wild HTML\" found on the \u000D\u000A## web can be parsed with it. **Note:** This parser does not check that each\u000D\u000A## ``<tag>`` has a corresponding ``</tag>``! These checks have do be \u000D\u000A## implemented by the client code for various reasons: \u000D\u000A##\u000D\u000A## * Old HTML contains tags that have no end tag: ``<br>`` for example.\u000D\u000A## * HTML tags are case insensitive, XML tags are case sensitive. Since this\u000D\u000A##   library can parse both, only the client knows which comparison is to be\u000D\u000A##   used.\u000D\u000A## * Thus the checks would have been very difficult to implement properly with\u000D\u000A##   little benefit, especially since they are simple to implement in the \u000D\u000A##   client. The client should use the `errorMsgExpected` proc to generate\u000D\u000A##   a nice error message that fits the other error messages this library\u000D\u000A##   creates.\u000D\u000A##\u000D\u000A##\u000D\u000A## Example 1: Retrieve HTML title\u000D\u000A## ==============================\u000D\u000A##\u000D\u000A## The file ``examples/htmltitle.nim`` demonstrates how to use the \u000D\u000A## XML parser to accomplish a simple task: To determine the title of an HTML\u000D\u000A## document.\u000D\u000A##\u000D\u000A## .. code-block:: nimrod\u000D\u000A##     :file: examples/htmltitle.nim\u000D\u000A##\u000D\u000A##\u000D\u000A## Example 2: Retrieve all HTML links\u000D\u000A## ==================================\u000D\u000A##\u000D\u000A## The file ``examples/htmlrefs.nim`` demonstrates how to use the \u000D\u000A## XML parser to accomplish another simple task: To determine all the links \u000D\u000A## an HTML document contains.\u000D\u000A##\u000D\u000A## .. code-block:: nimrod\u000D\u000A##     :file: examples/htmlrefs.nim\u000D\u000A##"
  }, 
  {
    "name": "TXmlParser", 
    "type": "skType", 
    "description": "the parser object.", 
    "code": "TXmlParser* = object of TBaseLexer\u000D\u000A  a, b, c: string\u000D\u000A  kind: TXmlEventKind\u000D\u000A  err: TXmlError\u000D\u000A  state: TParserState\u000D\u000A  filename: string\u000D\u000A  options: set[TXmlParseOption]\u000D\u000A"
  }, 
  {
    "name": "open", 
    "type": "skProc", 
    "description": "initializes the parser with an input stream. <cite>Filename</cite> is only used for nice error messages. The parser's behaviour can be controlled by the <cite>options</cite> parameter: If <cite>options</cite> contains <tt class=\"docutils literal\"><span class=\"pre\">reportWhitespace</span></tt> a whitespace token is reported as an <tt class=\"docutils literal\"><span class=\"pre\">xmlWhitespace</span></tt> event. If <cite>options</cite> contains <tt class=\"docutils literal\"><span class=\"pre\">reportComments</span></tt> a comment token is reported as an <tt class=\"docutils literal\"><span class=\"pre\">xmlComment</span></tt> event. ", 
    "code": "proc open*(my: var TXmlParser; input: PStream; filename: string; \u000D\u000A           options: set[TXmlParseOption] = {})"
  }, 
  {
    "name": "close", 
    "type": "skProc", 
    "description": "closes the parser <cite>my</cite> and its associated input stream.", 
    "code": "proc close*(my: var TXmlParser) {.inline.}"
  }, 
  {
    "name": "kind", 
    "type": "skProc", 
    "description": "returns the current event type for the XML parser", 
    "code": "proc kind*(my: TXmlParser): TXmlEventKind {.inline.}"
  }, 
  {
    "name": "charData", 
    "type": "skProc", 
    "description": "returns the character data for the events: <tt class=\"docutils literal\"><span class=\"pre\">xmlCharData</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">xmlWhitespace</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">xmlComment</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">xmlCData</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">xmlSpecial</span></tt>", 
    "code": "proc charData*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "elementName", 
    "type": "skProc", 
    "description": "returns the element name for the events: <tt class=\"docutils literal\"><span class=\"pre\">xmlElementStart</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">xmlElementEnd</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">xmlElementOpen</span></tt>", 
    "code": "proc elementName*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "entityName", 
    "type": "skProc", 
    "description": "returns the entity name for the event: <tt class=\"docutils literal\"><span class=\"pre\">xmlEntity</span></tt>", 
    "code": "proc entityName*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "attrKey", 
    "type": "skProc", 
    "description": "returns the attribute key for the event <tt class=\"docutils literal\"><span class=\"pre\">xmlAttribute</span></tt>", 
    "code": "proc attrKey*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "attrValue", 
    "type": "skProc", 
    "description": "returns the attribute value for the event <tt class=\"docutils literal\"><span class=\"pre\">xmlAttribute</span></tt>", 
    "code": "proc attrValue*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "PIName", 
    "type": "skProc", 
    "description": "returns the processing instruction name for the event <tt class=\"docutils literal\"><span class=\"pre\">xmlPI</span></tt>", 
    "code": "proc PIName*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "PIRest", 
    "type": "skProc", 
    "description": "returns the rest of the processing instruction for the event <tt class=\"docutils literal\"><span class=\"pre\">xmlPI</span></tt>", 
    "code": "proc PIRest*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "rawData", 
    "type": "skProc", 
    "description": "returns the underlying 'data' string by reference. This is only used for speed hacks.", 
    "code": "proc rawData*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "rawData2", 
    "type": "skProc", 
    "description": "returns the underlying second 'data' string by reference. This is only used for speed hacks.", 
    "code": "proc rawData2*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "getColumn", 
    "type": "skProc", 
    "description": "get the current column the parser has arrived at.", 
    "code": "proc getColumn*(my: TXmlParser): int {.inline.}"
  }, 
  {
    "name": "getLine", 
    "type": "skProc", 
    "description": "get the current line the parser has arrived at.", 
    "code": "proc getLine*(my: TXmlParser): int {.inline.}"
  }, 
  {
    "name": "getFilename", 
    "type": "skProc", 
    "description": "get the filename of the file that the parser processes.", 
    "code": "proc getFilename*(my: TXmlParser): string {.inline.}"
  }, 
  {
    "name": "errorMsg", 
    "type": "skProc", 
    "description": "returns a helpful error message for the event <tt class=\"docutils literal\"><span class=\"pre\">xmlError</span></tt>", 
    "code": "proc errorMsg*(my: TXmlParser): string"
  }, 
  {
    "name": "errorMsgExpected", 
    "type": "skProc", 
    "description": "returns an error message &quot;&lt;tag&gt; expected&quot; in the same format as the other error messages ", 
    "code": "proc errorMsgExpected*(my: TXmlParser; tag: string): string"
  }, 
  {
    "name": "errorMsg", 
    "type": "skProc", 
    "description": "returns an error message with text <cite>msg</cite> in the same format as the other error messages ", 
    "code": "proc errorMsg*(my: TXmlParser; msg: string): string"
  }, 
  {
    "name": "next", 
    "type": "skProc", 
    "description": "retrieves the first/next event. This controls the parser.", 
    "code": "proc next*(my: var TXmlParser)"
  }
]