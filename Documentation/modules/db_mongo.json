[
  {
    "comment": "This module implements a higher level wrapper for `mongodb`:idx:. Example:\u000D\u000A##\u000D\u000A## .. code-block:: nimrod\u000D\u000A##\u000D\u000A##    import mongo, db_mongo, oids, json\u000D\u000A##\u000D\u000A##    var conn = db_mongo.open()\u000D\u000A##\u000D\u000A##    # construct JSON data:\u000D\u000A##    var data = %{\"a\": %13, \"b\": %\"my string value\", \u000D\u000A##                 \"inner\": %{\"i\": %71} }\u000D\u000A##\u000D\u000A##    var id = insertID(conn, \"test.test\", data)\u000D\u000A##\u000D\u000A##    for v in find(conn, \"test.test\", \"this.a == 13\"):\u000D\u000A##      print v\u000D\u000A##\u000D\u000A##    delete(conn, \"test.test\", id)\u000D\u000A##    close(conn)"
  }, 
  {
    "name": "FWriteDb", 
    "type": "skType", 
    "description": "effect that denotes a write operation", 
    "code": "FWriteDb* = object of FDB"
  }, 
  {
    "name": "dbError", 
    "type": "skProc", 
    "description": "raises an EDb exception with message <cite>msg</cite>.", 
    "code": "proc dbError*(db: TDbConn; msg: string) {.noreturn.}"
  }, 
  {
    "name": "Close", 
    "type": "skProc", 
    "description": "closes the database connection.", 
    "code": "proc Close*(db: var TDbConn) {.tags: [FDB].}"
  }, 
  {
    "name": "Open", 
    "type": "skProc", 
    "description": "opens a database connection. Raises <cite>EDb</cite> if the connection could not be established.", 
    "code": "proc Open*(host: string = defaultHost; port: int = defaultPort): TDbConn {.\u000D\u000A    tags: [FDB].}"
  }, 
  {
    "name": "jsonToBSon", 
    "type": "skProc", 
    "description": "converts a JSON value into the BSON format. The result must be <tt class=\"docutils literal\"><span class=\"pre\">destroyed</span></tt> explicitely!", 
    "code": "proc jsonToBSon*(j: PJsonNode; oid: TOid): TBSon"
  }, 
  {
    "name": "`[]`", 
    "type": "skProc", 
    "description": "retrieves the value belonging to <cite>fieldname</cite>. Raises <cite>EInvalidKey</cite> if the attribute does not exist.", 
    "code": "proc `[]`*(obj: var TBSon; fieldname: cstring): TBSon"
  }, 
  {
    "name": "getId", 
    "type": "skProc", 
    "description": "retrieves the <tt class=\"docutils literal\"><span class=\"pre\">_id</span></tt> attribute of <cite>obj</cite>.", 
    "code": "proc getId*(obj: var TBSon): TOid"
  }, 
  {
    "name": "insertID", 
    "type": "skProc", 
    "description": "converts <cite>data</cite> to BSON format and inserts it in <cite>namespace</cite>. Returns the generated OID for the <tt class=\"docutils literal\"><span class=\"pre\">_id</span></tt> field.", 
    "code": "proc insertID*(db: var TDbConn; namespace: string; data: PJsonNode): TOid {.\u000D\u000A    tags: [FWriteDb].}"
  }, 
  {
    "name": "insert", 
    "type": "skProc", 
    "description": "converts <cite>data</cite> to BSON format and inserts it in <cite>namespace</cite>.  ", 
    "code": "proc insert*(db: var TDbConn; namespace: string; data: PJsonNode) {.\u000D\u000A    tags: [FWriteDb].}"
  }, 
  {
    "name": "update", 
    "type": "skProc", 
    "description": "updates <cite>obj</cite> in <cite>namespace</cite>.", 
    "code": "proc update*(db: var TDbConn; namespace: string; obj: var TBSon) {.\u000D\u000A    tags: [FReadDB, FWriteDb].}"
  }, 
  {
    "name": "update", 
    "type": "skProc", 
    "description": "updates the data with <cite>oid</cite> to have the new data <cite>obj</cite>.", 
    "code": "proc update*(db: var TDbConn; namespace: string; oid: TOid; obj: PJsonNode) {.\u000D\u000A    tags: [FReadDB, FWriteDb].}"
  }, 
  {
    "name": "delete", 
    "type": "skProc", 
    "description": "Deletes the object belonging to <cite>oid</cite>.", 
    "code": "proc delete*(db: var TDbConn; namespace: string; oid: TOid) {.tags: [FWriteDb].}"
  }, 
  {
    "name": "delete", 
    "type": "skProc", 
    "description": "Deletes the object <cite>obj</cite>.", 
    "code": "proc delete*(db: var TDbConn; namespace: string; obj: var TBSon) {.\u000D\u000A    tags: [FWriteDb].}"
  }, 
  {
    "name": "find", 
    "type": "skIterator", 
    "description": "iterates over any object in <cite>namespace</cite>.", 
    "code": "iterator find*(db: var TDbConn; namespace: string): var TBSon {.tags: [FReadDB].}"
  }, 
  {
    "name": "find", 
    "type": "skIterator", 
    "description": "yields the <cite>fields</cite> of any document that suffices <cite>query</cite>.", 
    "code": "iterator find*(db: var TDbConn; namespace: string; query, fields: var TBSon): var TBSon {.\u000D\u000A    tags: [FReadDB].}"
  }, 
  {
    "name": "find", 
    "type": "skIterator", 
    "description": "yields the <cite>fields</cite> of any document that suffices <cite>query</cite>. If <cite>fields</cite> is <tt class=\"docutils literal\"><span class=\"pre\">[]</span></tt> the whole document is yielded.", 
    "code": "iterator find*(db: var TDbConn; namespace: string; query: var TBSon; \u000D\u000A               fields: varargs[string]): var TBSon {.tags: [FReadDB].}"
  }, 
  {
    "name": "find", 
    "type": "skIterator", 
    "description": "yields the <cite>fields</cite> of any document that suffices <cite>query</cite>. If <cite>fields</cite> is <tt class=\"docutils literal\"><span class=\"pre\">[]</span></tt> the whole document is yielded.", 
    "code": "iterator find*(db: var TDbConn; namespace: string; query: string; \u000D\u000A               fields: varargs[string]): var TBSon {.tags: [FReadDB].}"
  }
]