[
  {
    "comment": "Implementation of a queue. The underlying implementation uses a ``seq``."
  }, 
  {
    "name": "TQueue", 
    "type": "skType", 
    "description": "a queue", 
    "code": "TQueue* {.pure, final.}[T] = object \u000D\u000A  data: seq[T]\u000D\u000A  rd, wr, count, mask: int\u000D\u000A"
  }, 
  {
    "name": "initQueue", 
    "type": "skProc", 
    "description": "creates a new queue. <cite>initialSize</cite> needs to be a power of 2.", 
    "code": "proc initQueue*[T](initialSize = 4): TQueue[T]"
  }, 
  {
    "name": "len", 
    "type": "skProc", 
    "description": "returns the number of elements of <cite>q</cite>.", 
    "code": "proc len*[T](q: TQueue[T]): int"
  }, 
  {
    "name": "items", 
    "type": "skIterator", 
    "description": "yields every element of <cite>q</cite>.", 
    "code": "iterator items*[T](q: TQueue[T]): T"
  }, 
  {
    "name": "add", 
    "type": "skProc", 
    "description": "adds an <cite>item</cite> to the end of the queue <cite>q</cite>.", 
    "code": "proc add*[T](q: var TQueue[T]; item: T)"
  }, 
  {
    "name": "enqueue", 
    "type": "skProc", 
    "description": "alias for the <tt class=\"docutils literal\"><span class=\"pre\">add</span></tt> operation.", 
    "code": "proc enqueue*[T](q: var TQueue[T]; item: T)"
  }, 
  {
    "name": "dequeue", 
    "type": "skProc", 
    "description": "removes and returns the first element of the queue <cite>q</cite>.", 
    "code": "proc dequeue*[T](q: var TQueue[T]): T"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "turns a queue into its string representation.", 
    "code": "proc `$`*[T](q: TQueue[T]): string"
  }
]