[
  {
    "comment": "This module implements a simple HTTP client that can be used to retrieve\u000D\u000A## webpages/other data.\u000D\u000A##\u000D\u000A##\u000D\u000A## **Note**: This module is not ideal, connection is not kept alive so sites with\u000D\u000A## many redirects are expensive. As such in the future this module may change,\u000D\u000A## and the current procedures will be deprecated.\u000D\u000A##\u000D\u000A## Retrieving a website\u000D\u000A## ====================\u000D\u000A## \u000D\u000A## This example uses HTTP GET to retrieve\u000D\u000A## ``http://google.com``\u000D\u000A## \u000D\u000A## .. code-block:: nimrod\u000D\u000A##   echo(getContent(\"http://google.com\"))\u000D\u000A## \u000D\u000A## Using HTTP POST\u000D\u000A## ===============\u000D\u000A## \u000D\u000A## This example demonstrates the usage of the W3 HTML Validator, it \u000D\u000A## uses ``multipart/form-data`` as the ``Content-Type`` to send the HTML to\u000D\u000A## the server. \u000D\u000A## \u000D\u000A## .. code-block:: nimrod\u000D\u000A##   var headers: string = \"Content-Type: multipart/form-data; boundary=xyz\\c\\L\"\u000D\u000A##   var body: string = \"--xyz\\c\\L\"\u000D\u000A##   # soap 1.2 output\u000D\u000A##   body.add(\"Content-Disposition: form-data; name=\\\"output\\\"\\c\\L\")\u000D\u000A##   body.add(\"\\c\\Lsoap12\\c\\L\")\u000D\u000A##    \u000D\u000A##   # html\u000D\u000A##   body.add(\"--xyz\\c\\L\")\u000D\u000A##   body.add(\"Content-Disposition: form-data; name=\\\"uploaded_file\\\";\" &\u000D\u000A##            \" filename=\\\"test.html\\\"\\c\\L\")\u000D\u000A##   body.add(\"Content-Type: text/html\\c\\L\")\u000D\u000A##   body.add(\"\\c\\L<html><head></head><body><p>test</p></body></html>\\c\\L\")\u000D\u000A##   body.add(\"--xyz--\")\u000D\u000A##    \u000D\u000A##   echo(postContent(\"http://validator.w3.org/check\", headers, body))\u000D\u000A##\u000D\u000A## SSL/TLS support\u000D\u000A## ===============\u000D\u000A## This requires the OpenSSL library, fortunately it's widely used and installed\u000D\u000A## on many operating systems. httpclient will use SSL automatically if you give\u000D\u000A## any of the functions a url with the ``https`` schema, for example:\u000D\u000A## ``https://github.com/``, you also have to compile with ``ssl`` defined like so:\u000D\u000A## ``nimrod c -d:ssl ...``.\u000D\u000A##\u000D\u000A## Timeouts\u000D\u000A## ========\u000D\u000A## Currently all functions support an optional timeout, by default the timeout is set to\u000D\u000A## `-1` which means that the function will never time out. The timeout is\u000D\u000A## measured in miliseconds, once it is set any call on a socket which may\u000D\u000A## block will be susceptible to this timeout, however please remember that the\u000D\u000A## function as a whole can take longer than the specified timeout, only\u000D\u000A## individual internal calls on the socket are affected. In practice this means\u000D\u000A## that as long as the server is sending data an exception will not be raised,\u000D\u000A## if however data does not reach client within the specified timeout an ETimeout\u000D\u000A## exception will then be raised.\u000D\u000A##\u000D\u000A## Proxy\u000D\u000A## =====\u000D\u000A##\u000D\u000A## A proxy can be specified as a param to any of these procedures, the ``newProxy``\u000D\u000A## constructor should be used for this purpose. However,\u000D\u000A## currently only basic authentication is supported."
  }, 
  {
    "name": "EHttpRequestErr", 
    "type": "skType", 
    "description": "Thrown in the <tt class=\"docutils literal\"><span class=\"pre\">getContent</span></tt> proc and <tt class=\"docutils literal\"><span class=\"pre\">postContent</span></tt> proc, when the server returns an error", 
    "code": "EHttpRequestErr* = object of ESynch"
  }, 
  {
    "name": "defUserAgent", 
    "type": "skConst", 
    "code": "defUserAgent* = \"Nimrod httpclient/0.1\""
  }, 
  {
    "name": "THttpMethod", 
    "type": "skType", 
    "description": "the requested HttpMethod", 
    "code": "THttpMethod* = enum \u000D\u000A  httpHEAD, ## Asks for the response identical to the one that would\u000D\u000A            ## correspond to a GET request, but without the response\u000D\u000A            ## body.\u000D\u000A  httpGET,                    ## Retrieves the specified resource.\u000D\u000A  httpPOST, ## Submits data to be processed to the identified \u000D\u000A            ## resource. The data is included in the body of the \u000D\u000A            ## request.\u000D\u000A  httpPUT,                    ## Uploads a representation of the specified resource.\u000D\u000A  httpDELETE,                 ## Deletes the specified resource.\u000D\u000A  httpTRACE, ## Echoes back the received request, so that a client \u000D\u000A             ## can see what intermediate servers are adding or\u000D\u000A             ## changing in the request.\u000D\u000A  httpOPTIONS, ## Returns the HTTP methods that the server supports \u000D\u000A               ## for specified address.\u000D\u000A  httpCONNECT ## Converts the request connection to a transparent \u000D\u000A              ## TCP/IP tunnel, usually used for proxies."
  }, 
  {
    "name": "newProxy", 
    "type": "skProc", 
    "description": "Constructs a new <tt class=\"docutils literal\"><span class=\"pre\">TProxy</span></tt> object.", 
    "code": "proc newProxy*(url: string; auth = \"\"): PProxy"
  }, 
  {
    "name": "request", 
    "type": "skProc", 
    "description": "<p>Requests <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> with the specified <tt class=\"docutils literal\"><span class=\"pre\">httpMethod</span></tt>.<br />Extra headers can be specified and must be seperated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt><br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000D\u000A", 
    "code": "proc request*(url: string; httpMethod = httpGET; extraHeaders = \"\"; body = \"\"; \u000D\u000A              sslContext: PSSLContext = defaultSSLContext; timeout = - 1; \u000D\u000A              userAgent = defUserAgent; proxy: PProxy = nil): TResponse"
  }, 
  {
    "name": "get", 
    "type": "skProc", 
    "description": "<p>GETs the <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> and returns a <tt class=\"docutils literal\"><span class=\"pre\">TResponse</span></tt> object<br />This proc also handles redirection<br />Extra headers can be specified and must be separated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt>.<br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000D\u000A", 
    "code": "proc get*(url: string; extraHeaders = \"\"; maxRedirects = 5; \u000D\u000A          sslContext: PSSLContext = defaultSSLContext; timeout = - 1; \u000D\u000A          userAgent = defUserAgent; proxy: PProxy = nil): TResponse"
  }, 
  {
    "name": "getContent", 
    "type": "skProc", 
    "description": "<p>GETs the body and returns it as a string.<br />Raises exceptions for the status codes <tt class=\"docutils literal\"><span class=\"pre\">4xx</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">5xx</span></tt><br />Extra headers can be specified and must be separated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt>.<br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000D\u000A", 
    "code": "proc getContent*(url: string; extraHeaders = \"\"; maxRedirects = 5; \u000D\u000A                 sslContext: PSSLContext = defaultSSLContext; timeout = - 1; \u000D\u000A                 userAgent = defUserAgent; proxy: PProxy = nil): string"
  }, 
  {
    "name": "post", 
    "type": "skProc", 
    "description": "<p>POSTs <tt class=\"docutils literal\"><span class=\"pre\">body</span></tt> to the <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> and returns a <tt class=\"docutils literal\"><span class=\"pre\">TResponse</span></tt> object.<br />This proc adds the necessary Content-Length header.<br />This proc also handles redirection.<br />Extra headers can be specified and must be separated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt>.<br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000D\u000A", 
    "code": "proc post*(url: string; extraHeaders = \"\"; body = \"\"; maxRedirects = 5; \u000D\u000A           sslContext: PSSLContext = defaultSSLContext; timeout = - 1; \u000D\u000A           userAgent = defUserAgent; proxy: PProxy = nil): TResponse"
  }, 
  {
    "name": "postContent", 
    "type": "skProc", 
    "description": "<p>POSTs <tt class=\"docutils literal\"><span class=\"pre\">body</span></tt> to <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> and returns the response's body as a string<br />Raises exceptions for the status codes <tt class=\"docutils literal\"><span class=\"pre\">4xx</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">5xx</span></tt><br />Extra headers can be specified and must be separated by <tt class=\"docutils literal\"><span class=\"pre\">\\c\\L</span></tt>.<br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000D\u000A", 
    "code": "proc postContent*(url: string; extraHeaders = \"\"; body = \"\"; maxRedirects = 5; \u000D\u000A                  sslContext: PSSLContext = defaultSSLContext; timeout = - 1; \u000D\u000A                  userAgent = defUserAgent; proxy: PProxy = nil): string"
  }, 
  {
    "name": "downloadFile", 
    "type": "skProc", 
    "description": "<p>Downloads <tt class=\"docutils literal\"><span class=\"pre\">url</span></tt> and saves it to <tt class=\"docutils literal\"><span class=\"pre\">outputFilename</span></tt><br />An optional timeout can be specified in miliseconds, if reading from the<br /></p><p>server takes longer than specified an ETimeout exception will be raised.</p>\u000D\u000A", 
    "code": "proc downloadFile*(url: string; outputFilename: string; \u000D\u000A                   sslContext: PSSLContext = defaultSSLContext; timeout = - 1; \u000D\u000A                   userAgent = defUserAgent; proxy: PProxy = nil)"
  }
]