[
  {
    "comment": "Module for computing MD5 checksums."
  }, 
  {
    "name": "MD5Context", 
    "type": "skType", 
    "code": "MD5Context* {.final.} = object \u000D\u000A  State: MD5State\u000D\u000A  Count: array[0 .. 1, int32]\u000D\u000A  Buffer: MD5Buffer\u000D\u000A"
  }, 
  {
    "name": "MD5Init", 
    "type": "skProc", 
    "description": "initializes a MD5Context  ", 
    "code": "proc MD5Init*(c: var MD5Context)"
  }, 
  {
    "name": "MD5Update", 
    "type": "skProc", 
    "description": "updates the MD5Context with the <cite>input</cite> data of length <cite>len</cite>", 
    "code": "proc MD5Update*(c: var MD5Context; input: cstring; len: int)"
  }, 
  {
    "name": "MD5Final", 
    "type": "skProc", 
    "description": "finishes the MD5Context and stores the result in <cite>digest</cite>", 
    "code": "proc MD5Final*(c: var MD5Context; digest: var MD5Digest)"
  }, 
  {
    "name": "toMD5", 
    "type": "skProc", 
    "description": "computes the MD5Digest value for a string <cite>s</cite>", 
    "code": "proc toMD5*(s: string): MD5Digest"
  }, 
  {
    "name": "`$`", 
    "type": "skProc", 
    "description": "converts a MD5Digest value into its string representation", 
    "code": "proc `$`*(D: MD5Digest): string"
  }, 
  {
    "name": "getMD5", 
    "type": "skProc", 
    "description": "computes an MD5 value of <cite>s</cite> and returns its string representation", 
    "code": "proc getMD5*(s: string): string"
  }, 
  {
    "name": "`==`", 
    "type": "skProc", 
    "description": "checks if two MD5Digest values are identical", 
    "code": "proc `==`*(D1, D2: MD5Digest): bool"
  }
]