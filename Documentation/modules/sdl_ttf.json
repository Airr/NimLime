[
  {
    "name": "UNICODE_BOM_SWAPPED", 
    "type": "skConst", 
    "code": "UNICODE_BOM_SWAPPED* = 0x0000FFFE"
  }, 
  {
    "name": "Linked_Version", 
    "type": "skProc", 
    "code": "proc Linked_Version*(): sdl.Pversion {.cdecl, importc: \"TTF_Linked_Version\", \u000D\u000A                                       dynlib: ttfLibName.}"
  }, 
  {
    "name": "ByteSwappedUNICODE", 
    "type": "skProc", 
    "code": "proc ByteSwappedUNICODE*(swapped: cint) {.cdecl, \u000D\u000A    importc: \"TTF_ByteSwappedUNICODE\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "Init", 
    "type": "skProc", 
    "code": "proc Init*(): cint {.cdecl, importc: \"TTF_Init\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "OpenFont", 
    "type": "skProc", 
    "code": "proc OpenFont*(filename: cstring; ptsize: cint): PFont {.cdecl, \u000D\u000A    importc: \"TTF_OpenFont\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "OpenFontIndex", 
    "type": "skProc", 
    "code": "proc OpenFontIndex*(filename: cstring; ptsize: cint; index: int32): PFont {.\u000D\u000A    cdecl, importc: \"TTF_OpenFontIndex\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "OpenFontRW", 
    "type": "skProc", 
    "code": "proc OpenFontRW*(src: PRWops; freesrc: cint; ptsize: cint): PFont {.cdecl, \u000D\u000A    importc: \"TTF_OpenFontRW\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "OpenFontIndexRW", 
    "type": "skProc", 
    "code": "proc OpenFontIndexRW*(src: PRWops; freesrc: cint; ptsize: cint; index: int32): PFont {.\u000D\u000A    cdecl, importc: \"TTF_OpenFontIndexRW\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "GetFontStyle", 
    "type": "skProc", 
    "code": "proc GetFontStyle*(font: PFont): cint {.cdecl, importc: \"TTF_GetFontStyle\", \u000D\u000A                                        dynlib: ttfLibName.}"
  }, 
  {
    "name": "SetFontStyle", 
    "type": "skProc", 
    "code": "proc SetFontStyle*(font: PFont; style: cint) {.cdecl, \u000D\u000A    importc: \"TTF_SetFontStyle\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "FontHeight", 
    "type": "skProc", 
    "code": "proc FontHeight*(font: PFont): cint {.cdecl, importc: \"TTF_FontHeight\", \u000D\u000A                                      dynlib: ttfLibName.}"
  }, 
  {
    "name": "FontAscent", 
    "type": "skProc", 
    "code": "proc FontAscent*(font: PFont): cint {.cdecl, importc: \"TTF_FontAscent\", \u000D\u000A                                      dynlib: ttfLibName.}"
  }, 
  {
    "name": "FontDescent", 
    "type": "skProc", 
    "code": "proc FontDescent*(font: PFont): cint {.cdecl, importc: \"TTF_FontDescent\", \u000D\u000A                                       dynlib: ttfLibName.}"
  }, 
  {
    "name": "FontLineSkip", 
    "type": "skProc", 
    "code": "proc FontLineSkip*(font: PFont): cint {.cdecl, importc: \"TTF_FontLineSkip\", \u000D\u000A                                        dynlib: ttfLibName.}"
  }, 
  {
    "name": "FontFaces", 
    "type": "skProc", 
    "code": "proc FontFaces*(font: PFont): int32 {.cdecl, importc: \"TTF_FontFaces\", \u000D\u000A                                      dynlib: ttfLibName.}"
  }, 
  {
    "name": "FontFaceIsFixedWidth", 
    "type": "skProc", 
    "code": "proc FontFaceIsFixedWidth*(font: PFont): cint {.cdecl, \u000D\u000A    importc: \"TTF_FontFaceIsFixedWidth\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "FontFaceFamilyName", 
    "type": "skProc", 
    "code": "proc FontFaceFamilyName*(font: PFont): cstring {.cdecl, \u000D\u000A    importc: \"TTF_FontFaceFamilyName\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "FontFaceStyleName", 
    "type": "skProc", 
    "code": "proc FontFaceStyleName*(font: PFont): cstring {.cdecl, \u000D\u000A    importc: \"TTF_FontFaceStyleName\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "GlyphMetrics", 
    "type": "skProc", 
    "code": "proc GlyphMetrics*(font: PFont; ch: Uint16; minx: var cint; maxx: var cint; \u000D\u000A                   miny: var cint; maxy: var cint; advance: var cint): cint {.\u000D\u000A    cdecl, importc: \"TTF_GlyphMetrics\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "SizeText", 
    "type": "skProc", 
    "code": "proc SizeText*(font: PFont; text: cstring; w: var cint; y: var cint): cint {.\u000D\u000A    cdecl, importc: \"TTF_SizeText\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "SizeUTF8", 
    "type": "skProc", 
    "code": "proc SizeUTF8*(font: PFont; text: cstring; w: var cint; y: var cint): cint {.\u000D\u000A    cdecl, importc: \"TTF_SizeUTF8\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "SizeUNICODE", 
    "type": "skProc", 
    "code": "proc SizeUNICODE*(font: PFont; text: PUint16; w: var cint; y: var cint): cint {.\u000D\u000A    cdecl, importc: \"TTF_SizeUNICODE\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderUTF8_Solid", 
    "type": "skProc", 
    "code": "proc RenderUTF8_Solid*(font: PFont; text: cstring; fg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderUTF8_Solid\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderUNICODE_Solid", 
    "type": "skProc", 
    "code": "proc RenderUNICODE_Solid*(font: PFont; text: PUint16; fg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderUNICODE_Solid\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderGlyph_Solid", 
    "type": "skProc", 
    "code": "proc RenderGlyph_Solid*(font: PFont; ch: Uint16; fg: TColor): PSurface {.cdecl, \u000D\u000A    importc: \"TTF_RenderGlyph_Solid\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderText_Shaded", 
    "type": "skProc", 
    "code": "proc RenderText_Shaded*(font: PFont; text: cstring; fg: TColor; bg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderText_Shaded\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderUTF8_Shaded", 
    "type": "skProc", 
    "code": "proc RenderUTF8_Shaded*(font: PFont; text: cstring; fg: TColor; bg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderUTF8_Shaded\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderUNICODE_Shaded", 
    "type": "skProc", 
    "code": "proc RenderUNICODE_Shaded*(font: PFont; text: PUint16; fg: TColor; bg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderUNICODE_Shaded\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderGlyph_Shaded", 
    "type": "skProc", 
    "code": "proc RenderGlyph_Shaded*(font: PFont; ch: Uint16; fg: TColor; bg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderGlyph_Shaded\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderText_Blended", 
    "type": "skProc", 
    "code": "proc RenderText_Blended*(font: PFont; text: cstring; fg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderText_Blended\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderUTF8_Blended", 
    "type": "skProc", 
    "code": "proc RenderUTF8_Blended*(font: PFont; text: cstring; fg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderUTF8_Blended\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderUNICODE_Blended", 
    "type": "skProc", 
    "code": "proc RenderUNICODE_Blended*(font: PFont; text: PUint16; fg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderUNICODE_Blended\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "RenderGlyph_Blended", 
    "type": "skProc", 
    "code": "proc RenderGlyph_Blended*(font: PFont; ch: Uint16; fg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderGlyph_Blended\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "CloseFont", 
    "type": "skProc", 
    "code": "proc CloseFont*(font: PFont) {.cdecl, importc: \"TTF_CloseFont\", \u000D\u000A                               dynlib: ttfLibName.}"
  }, 
  {
    "name": "Quit", 
    "type": "skProc", 
    "code": "proc Quit*() {.cdecl, importc: \"TTF_Quit\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "WasInit", 
    "type": "skProc", 
    "code": "proc WasInit*(): cint {.cdecl, importc: \"TTF_WasInit\", dynlib: ttfLibName.}"
  }, 
  {
    "name": "VERSION", 
    "type": "skProc", 
    "code": "proc VERSION*(X: var sdl.Tversion)"
  }, 
  {
    "name": "RenderText_Solid", 
    "type": "skProc", 
    "code": "proc RenderText_Solid*(font: PFont; text: cstring; fg: TColor): PSurface {.\u000D\u000A    cdecl, importc: \"TTF_RenderText_Solid\", dynlib: ttfLibName.}"
  }
]